prog  				= main funcs_dcl $


main  				= function main() \n block end
block  				= block_content \n block | λ
block_content  			= dcl | stmt | λ
dcl  					= create ADT end
					 |   number_types id initialization
initialization				= assign expr				 
 |   λ
ADT 				= graph_ADT
			 		 |   collection_type
Graf
graph_ADT				= graph_type id \n graph_dcl
graph_dcl 				= graph_vertex_dcl \n graph_dcl1
graph_dcl1				= graph_dcl
					 |   λ
graph_vertex_dcl 			= id -- graph_vertex_dcl1
graph_vertex_dcl1			= {vertex_list} 
					 |   idweight
vertex_list				= idweight vertex_list1
vertex_list1				= , vertex_list
					 |   λ
weight				= [arith_expr]
					 |   λ


Expression
expr					= and_expr A
A					= or and_expr
					 |   λ
and_expr				= equal_expr B
B					= and equal_expr
					 |   λ
equal_expr				= rel_expr C
C					=  equality_op rel_expr
					 |   λ
rel_expr				= arith_expr rel_expr1
rel_expr1				= relational_op arith_expr
					 |   λ
arith_expr				= term D
D					=  add_sub term
					 |   λ
term					= neg_expr E
E					=  mul_div_mod atomic_expr
					 |   λ
neg_expr				= neg atomic_expr
					 |   atomic_expr
atomic_expr			= (expr)
 |   value
value				= id value1
					 |   inum_val
					 |   fnum_val
					 |   boolean
value1				= function_call1
	 |   λ
function_call			= id function_call1
function_call1			= .function_call
					 |   (actual_parameters)
actual_parameters			= actual_parameter_list
					 |   λ
actual_parameter_list		= expr actual_parameter_list1
actual_parameter_list1		= , actual_parameter_list
					 |   λ
number_types			= int
 |   real 

Statements
stmt					= id stmt1
					 |   loop
					 |   if_statement
stmt1				= function_call1
					 |   assignment
assignment				= assign expr 
loop					= while_statement
					 |   for_statement
					 |   foreach_statement
while_statement			= while expr do \n block end
for_statement			= for id assign inum to inum do \n block end
foreach_statement			= foreach id in id do \n block end
					 |   foreach id in function_call do \n block end
if_statement			= if expr then block end
collection_type			= collection_token id collection_dcl 
collection_dcl			= assign function_call  
					 |   \n element_list
					 |   λ
element_list				= value \n element_list1
element_list1			= element_list
					 |   λ
funcs_dcl  				= func_dcl funcs_dcl 
 |   λ
func_dcl 				= ret function id (formal_parameters) block end
ret					= type
 |   λ	
formal_parameters			= formal_parameter_list 
 |   λ
formal_parameter_list  		= formal_parameter formal_parameter_list1
formal_parameter_list1		= , formal_parameter_list
					 |   λ
formal_parameter 			= type id 
type				            = object_types
					 |   boolean
					 |   number_types
object_types			= graph_type
					 |   collection_token
					 |   graph_element_types
graph_element_types		= Vertex | Edge
