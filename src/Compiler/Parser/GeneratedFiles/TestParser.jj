/*@bgen(jjtree) Generated By:JJTree: Do not edit this line. TestParser.jj */
/*@egen*//**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */


options
{
                           
  STATIC = false;
                 
               
                      
}

PARSER_BEGIN(TestParser)

package Compiler.Parser.GeneratedFiles;

import Compiler.Parser.CustomVisitors.FunctionVisitor;import Compiler.Parser.CustomVisitors.PrintVisitor;import Compiler.Parser.TreePrinter;import Compiler.SymbolTable.Table.SymbolTable;import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

public class TestParser/*@bgen(jjtree)*/implements TestParserTreeConstants/*@egen*/ {/*@bgen(jjtree)*/
  protected JJTTestParserState jjtree = new JJTTestParserState();

/*@egen*/
    public static void main(String[] args) {
        try {
            System.out.println(parseTextFile("src/Compiler/Parser/test"));
            //useVisitorMethod(new PrintVisitor(), "src/Compiler/Parser/test", null);
//            SymbolTable st = new SymbolTable();
//            st.openScope();
//            useVisitorMethod(new FunctionVisitor(), "src/Compiler/Parser/test", st);
//            useVisitorMethod(new StaticSemanticsVisitor(st), "src/Compiler/Parser/test", st);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    public static String parseTextFile(String filePath) throws Exception {
        Node root = createParseTree(filePath);
        return TreePrinter.createDotOutput(root);
  }

    public static void useVisitorMethod(TestParserVisitor visitor, String filePath, Object data) throws Exception {
        Node root = createParseTree(filePath);
        root.jjtAccept(visitor, data);
    }

    private static Node createParseTree(String filePath) throws Exception {
        File file = new File(filePath);
        BufferedReader reader = new BufferedReader(new FileReader(file));
        TestParser parser = new TestParser(reader);
        return parser.start();
    }
}
  


PARSER_END(TestParser)

SKIP :
{
  " "
| "\r"
| "\t"
| < "//" (~["\n"])* > //This is for skipping single-line comment
| < "/*" > : ML_COMMENT_STATE //This is for skipping multi-line comment
}

<ML_COMMENT_STATE> SKIP :
{
  < "*/" > : DEFAULT
| < ~[] >
}

TOKEN : /* OPERATORS */
{
  < CREATE : "create" >
| < END : "end" >
| < BLANK : " " | "\t" >
| < NEWLINE : "\n" >
| < COMMA : "," >
| < DOT : "." >
| < MAIN : "main" >
| < ENDOFFILE : "<EOF>" >
| < ASSIGN : "=" >
| < AND : "&" >
| < OR : "|" >
| < NEG : "!" >
| < FUNCTION : "function" >
| < WHILE : "while" >
| < FOR : "for" >
| < FOREACH : "foreach" >
| < IN : "in" >
| < IF : "if" >
| < THEN : "then" >
| < ELSE : "else" >
| < LCURLY : "{" >
| < RCURLY : "}" >
| < LHARD : "[" >
| < RHARD : "]" >
| < LPAREN : "(" >
| < RPAREN : ")" >
| < CONNECTION : "--" >
| < VERTEX : "Vertex" >
| < EDGE : "Edge" >
| < DIEDGE : "DiEdge" >
| < INT : "int" >
| < REAL : "real" >
| < BOOLEAN : "boolean" >
| < BOOL_VAL : "true" | "false" >
| < DO : "do" >
| < TO : "to" >
| < RETURN : "return" >
| < DCL : "dcl" >
| < MAP : "Map" >
| < COLOR : "Color" >
| < LABEL : "label" >
}

TOKEN :
{
  < GRAPH_TYPE : (< GRAPH >) >
| < #GRAPH : "Graph" | "DiGraph" >
| < CONSTANTS : (< CONSTANT >) >
| < #CONSTANT : "INF" | "NEG_INF" | "\u00c3\u02dc" >
| < ADD_SUB : (< addsub >) >
| < #addsub : "+" | "-" >
| < MUL_DIV : (< muldiv >) >
| < #muldiv : "*" | "/" >
| < EQUALITY_OP : (< equality_ope >) >
| < #equality_ope : "==" | "!=" >
| < RELATIONAL_OP : (< relational_ope >) >
| < #relational_ope : "<=" | ">=" >
| < LANGLE : "<" >
| < RANGLE : ">" >
| < COLLECTION_TYPE : (< collection >) >
| < #collection : "Set" | "Queue" | "MinQueue" | "MaxQueue" | "Stack" >
| < COLOR_VAL : "GRAY" | "BLACK" | "WHITE" | "RED" | "GREEN" | "BLUE" | "YELLOW" >
| < INUM_VAL : (< DIGIT >) >
| < #DIGIT : "0" | ["1"-"9"](["0"-"9"])* >
| < FNUM_VAL : (< DIGITF >) >
| < #DIGITF : ("0" | ["1"-"9"](["0"-"9"])*)"."(["0"-"9"])+ >
| < IDENTIFIER : (< ID >) >
| < #ID : ["a"-"z", "A"-"Z"](["a"-"z", "A"-"Z"] | ["0"-"9"])* >
| < LABEL_VAL : "\"" <ID> "\"" >


}

JAVACODE
void skip_to_first_dcl() { 
      Token tok;
      while (true) {
        tok = getToken(1);
        if (tok.kind != NEWLINE)
            break;
        tok = getNextToken();
      }
}

JAVACODE
void skip_to_EOF() {
      Token tok;
      while (true) {
        tok = getToken(1);
        if (tok.kind == EOF)
            break;
        else if (tok.kind != NEWLINE)
            throw new ParseException("Encountered '" + tok.kind + "'. Was expecting: '<NEWLINE>' or '<EOF>'");
        tok = getNextToken();
      }
}



SimpleNode start()        :
{/*@bgen(jjtree) START */
  ASTSTART jjtn000 = new ASTSTART(JJTSTART);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) START */
  try {
/*@egen*/
  prog()/*@bgen(jjtree)*/
         {
           jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
           jjtn000.jjtSetLastToken(getToken(0));
         }
/*@egen*/ {return jjtn000;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

void prog()           :
{/*@bgen(jjtree) #PROG(> 1) */
  ASTPROG jjtn000 = new ASTPROG(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #PROG(> 1) */
    try {
/*@egen*/
    skip_to_first_dcl() vertex_edge_attributes() main() newlines_plus()/*@bgen(jjtree) #FUNCS_DCL(> 1) */
                                                                        {
                                                                          ASTFUNCS_DCL jjtn001 = new ASTFUNCS_DCL(JJTFUNCS_DCL);
                                                                          boolean jjtc001 = true;
                                                                          jjtree.openNodeScope(jjtn001);
                                                                          jjtn001.jjtSetFirstToken(getToken(1));
                                                                        }
                                                                        try {
/*@egen*/ funcs_dcl()/*@bgen(jjtree)*/
                                                                        } catch (Throwable jjte001) {
                                                                          if (jjtc001) {
                                                                            jjtree.clearNodeScope(jjtn001);
                                                                            jjtc001 = false;
                                                                          } else {
                                                                            jjtree.popNode();
                                                                          }
                                                                          if (jjte001 instanceof RuntimeException) {
                                                                            throw (RuntimeException)jjte001;
                                                                          }
                                                                          if (jjte001 instanceof ParseException) {
                                                                            throw (ParseException)jjte001;
                                                                          }
                                                                          throw (Error)jjte001;
                                                                        } finally {
                                                                          if (jjtc001) {
                                                                            jjtree.closeNodeScope(jjtn001, jjtree.nodeArity() > 1);
                                                                            jjtn001.jjtSetLastToken(getToken(0));
                                                                          }
                                                                        }
/*@egen*/                skip_to_EOF() <EOF>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void newlines_plus()       :
{}
{
    <NEWLINE> newlines_star()
}

void newlines_star()       :
{}
{
    <NEWLINE> newlines_star() | empty()
}

void vertex_edge_attributes()                       :
{/*@bgen(jjtree) #VERTEX_EDGE_ATTR(> 1) */
  ASTVERTEX_EDGE_ATTR jjtn000 = new ASTVERTEX_EDGE_ATTR(JJTVERTEX_EDGE_ATTR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #VERTEX_EDGE_ATTR(> 1) */
    try {
/*@egen*/
    vertex_attributes() | edge_attributes() | newlines_star()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void vertex_attributes()       :
{}
{/*@bgen(jjtree) VERTEX_ATTRIBUTES */
    {
      ASTVERTEX_ATTRIBUTES jjtn001 = new ASTVERTEX_ATTRIBUTES(JJTVERTEX_ATTRIBUTES);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    vertex_attr_dcl()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                    newlines_star()/*@bgen(jjtree) EDGE_ATTRIBUTES */
                                                         {
                                                           ASTEDGE_ATTRIBUTES jjtn002 = new ASTEDGE_ATTRIBUTES(JJTEDGE_ATTRIBUTES);
                                                           boolean jjtc002 = true;
                                                           jjtree.openNodeScope(jjtn002);
                                                           jjtn002.jjtSetFirstToken(getToken(1));
                                                         }
                                                         try {
/*@egen*/ vertex_attr_tail()/*@bgen(jjtree)*/
                                                         } catch (Throwable jjte002) {
                                                           if (jjtc002) {
                                                             jjtree.clearNodeScope(jjtn002);
                                                             jjtc002 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte002 instanceof RuntimeException) {
                                                             throw (RuntimeException)jjte002;
                                                           }
                                                           if (jjte002 instanceof ParseException) {
                                                             throw (ParseException)jjte002;
                                                           }
                                                           throw (Error)jjte002;
                                                         } finally {
                                                           if (jjtc002) {
                                                             jjtree.closeNodeScope(jjtn002, true);
                                                             jjtn002.jjtSetLastToken(getToken(0));
                                                           }
                                                         }
/*@egen*/                 
}

void vertex_attr_dcl()       :
{}
{
    <VERTEX> <DCL> newlines_plus() attribute_dcl() <END>
}

void vertex_attr_tail()       :
{}
{
    edge_attr_dcl() newlines_star() | empty()
}

void edge_attributes()       :
{}
{/*@bgen(jjtree) EDGE_ATTRIBUTES */
    {
      ASTEDGE_ATTRIBUTES jjtn001 = new ASTEDGE_ATTRIBUTES(JJTEDGE_ATTRIBUTES);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    edge_attr_dcl()/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                  newlines_star()/*@bgen(jjtree) VERTEX_ATTRIBUTES */
                                                     {
                                                       ASTVERTEX_ATTRIBUTES jjtn002 = new ASTVERTEX_ATTRIBUTES(JJTVERTEX_ATTRIBUTES);
                                                       boolean jjtc002 = true;
                                                       jjtree.openNodeScope(jjtn002);
                                                       jjtn002.jjtSetFirstToken(getToken(1));
                                                     }
                                                     try {
/*@egen*/ edge_attr_tail()/*@bgen(jjtree)*/
                                                     } catch (Throwable jjte002) {
                                                       if (jjtc002) {
                                                         jjtree.clearNodeScope(jjtn002);
                                                         jjtc002 = false;
                                                       } else {
                                                         jjtree.popNode();
                                                       }
                                                       if (jjte002 instanceof RuntimeException) {
                                                         throw (RuntimeException)jjte002;
                                                       }
                                                       if (jjte002 instanceof ParseException) {
                                                         throw (ParseException)jjte002;
                                                       }
                                                       throw (Error)jjte002;
                                                     } finally {
                                                       if (jjtc002) {
                                                         jjtree.closeNodeScope(jjtn002, true);
                                                         jjtn002.jjtSetLastToken(getToken(0));
                                                       }
                                                     }
/*@egen*/                   
}

void edge_attr_dcl()       :
{}
{
    <EDGE> <DCL> newlines_plus() attribute_dcl() <END>
}

void edge_attr_tail()       :
{}
{
    vertex_attr_dcl() newlines_star() | empty()
}

void attribute_dcl()                    :
{/*@bgen(jjtree) #ATTRIBUTE_DCL(> 1) */
  ASTATTRIBUTE_DCL jjtn000 = new ASTATTRIBUTE_DCL(JJTATTRIBUTE_DCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #ATTRIBUTE_DCL(> 1) */
    try {
/*@egen*/
    simple_types_dcl() newlines_plus() attribute_dcl() |/*@bgen(jjtree) OBJECT_TYPE */
                                                         {
                                                           ASTOBJECT_TYPE jjtn001 = new ASTOBJECT_TYPE(JJTOBJECT_TYPE);
                                                           boolean jjtc001 = true;
                                                           jjtree.openNodeScope(jjtn001);
                                                           jjtn001.jjtSetFirstToken(getToken(1));
                                                         }
                                                         try {
/*@egen*/ (object_types() identifier() newlines_plus())/*@bgen(jjtree)*/
                                                         } catch (Throwable jjte001) {
                                                           if (jjtc001) {
                                                             jjtree.clearNodeScope(jjtn001);
                                                             jjtc001 = false;
                                                           } else {
                                                             jjtree.popNode();
                                                           }
                                                           if (jjte001 instanceof RuntimeException) {
                                                             throw (RuntimeException)jjte001;
                                                           }
                                                           if (jjte001 instanceof ParseException) {
                                                             throw (ParseException)jjte001;
                                                           }
                                                           throw (Error)jjte001;
                                                         } finally {
                                                           if (jjtc001) {
                                                             jjtree.closeNodeScope(jjtn001, true);
                                                             jjtn001.jjtSetLastToken(getToken(0));
                                                           }
                                                         }
/*@egen*/              attribute_dcl() | empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void simple_types_dcl()             :
{/*@bgen(jjtree) SIMPLE_DCL */
  ASTSIMPLE_DCL jjtn000 = new ASTSIMPLE_DCL(JJTSIMPLE_DCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) SIMPLE_DCL */
    try {
/*@egen*/
    simple_types() identifier() initialization()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void simple_types()               :
{/*@bgen(jjtree) SIMPLE_TYPES */
 ASTSIMPLE_TYPES jjtn000 = new ASTSIMPLE_TYPES(JJTSIMPLE_TYPES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) SIMPLE_TYPES */
    try {
/*@egen*/
    t = < INT >/*@bgen(jjtree)*/
                {
                  jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
                  jjtn000.jjtSetLastToken(getToken(0));
                }
/*@egen*/ {jjtn000.value = t.image;} | t = < REAL >/*@bgen(jjtree)*/
                                                          {
                                                            jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
                                                            jjtn000.jjtSetLastToken(getToken(0));
                                                          }
/*@egen*/ {jjtn000.value = t.image;} | t = < BOOLEAN >/*@bgen(jjtree)*/
                                                                                                       {
                                                                                                         jjtree.closeNodeScope(jjtn000, true);
                                                                                                         jjtc000 = false;
                                                                                                         jjtn000.jjtSetLastToken(getToken(0));
                                                                                                       }
/*@egen*/ {jjtn000.value = t.image;} | t = <LABEL>/*@bgen(jjtree)*/
                                                                                                                                                {
                                                                                                                                                  jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                  jjtc000 = false;
                                                                                                                                                  jjtn000.jjtSetLastToken(getToken(0));
                                                                                                                                                }
/*@egen*/ {jjtn000.value = t.image;} | t = <COLOR>/*@bgen(jjtree)*/
                                                                                                                                                                                         {
                                                                                                                                                                                           jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                           jjtc000 = false;
                                                                                                                                                                                           jjtn000.jjtSetLastToken(getToken(0));
                                                                                                                                                                                         }
/*@egen*/ {jjtn000.value = t.image;} | t = <VERTEX>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                   {
                                                                                                                                                                                                                                     jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                     jjtc000 = false;
                                                                                                                                                                                                                                     jjtn000.jjtSetLastToken(getToken(0));
                                                                                                                                                                                                                                   }
/*@egen*/ {jjtn000.value = t.image;} | t = <EDGE>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                           {
                                                                                                                                                                                                                                                                             jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                             jjtc000 = false;
                                                                                                                                                                                                                                                                             jjtn000.jjtSetLastToken(getToken(0));
                                                                                                                                                                                                                                                                           }
/*@egen*/ {jjtn000.value = t.image;} | t = <DIEDGE>/*@bgen(jjtree)*/
                                                                                                                                                                                                                                                                                                                     {
                                                                                                                                                                                                                                                                                                                       jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                                                                                                                                                       jjtc000 = false;
                                                                                                                                                                                                                                                                                                                       jjtn000.jjtSetLastToken(getToken(0));
                                                                                                                                                                                                                                                                                                                     }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void identifier()             :
{/*@bgen(jjtree) IDENTIFIER */
 ASTIDENTIFIER jjtn000 = new ASTIDENTIFIER(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) IDENTIFIER */
    try {
/*@egen*/
    t = < IDENTIFIER >/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void initialization()       :
{}
{
    < ASSIGN > expr() | empty()
}

void object_types()       :
{}
{
    graph_type() | collection_type() | map()
}

void map()      :
{/*@bgen(jjtree) MAP */
  ASTMAP jjtn000 = new ASTMAP(JJTMAP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MAP */
    try {
/*@egen*/
    <MAP> <LANGLE> type() <COMMA> type() <RANGLE>/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void collection_type()                  :
{/*@bgen(jjtree) COLLECTION_TYPE */
 ASTCOLLECTION_TYPE jjtn000 = new ASTCOLLECTION_TYPE(JJTCOLLECTION_TYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) COLLECTION_TYPE */
    try {
/*@egen*/
    t = <COLLECTION_TYPE> <LANGLE> type() <RANGLE>/*@bgen(jjtree)*/
                                                   {
                                                     jjtree.closeNodeScope(jjtn000, true);
                                                     jjtc000 = false;
                                                     jjtn000.jjtSetLastToken(getToken(0));
                                                   }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void expr()              :
{/*@bgen(jjtree) #OR_EXPR(> 1) */
  ASTOR_EXPR jjtn000 = new ASTOR_EXPR(JJTOR_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #OR_EXPR(> 1) */
    try {
/*@egen*/
    and_expr() A()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void A()       :
{}
{
    < OR > and_expr() A() | empty()
}

void and_expr()               :
{/*@bgen(jjtree) #AND_EXPR(> 1) */
  ASTAND_EXPR jjtn000 = new ASTAND_EXPR(JJTAND_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) #AND_EXPR(> 1) */
    try {
/*@egen*/
    equal_expr() B()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void B()       :
{}
{
    < AND > equal_expr() B() | empty()
}

void equal_expr()                 :
{/*@bgen(jjtree) #EQUAL_EXPR(> 1) */
 ASTEQUAL_EXPR jjtn000 = new ASTEQUAL_EXPR(JJTEQUAL_EXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) #EQUAL_EXPR(> 1) */
    try {
/*@egen*/
    rel_expr() t = equal_expr1()/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                                   jjtc000 = false;
                                   jjtn000.jjtSetLastToken(getToken(0));
                                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

Token equal_expr1()       :
{Token t;}
{
    t = < EQUALITY_OP > rel_expr() {return t;} | empty() {return new Token();}
}

void rel_expr()               :
{/*@bgen(jjtree) #REL_EXPR(> 1) */
 ASTREL_EXPR jjtn000 = new ASTREL_EXPR(JJTREL_EXPR);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) #REL_EXPR(> 1) */
    try {
/*@egen*/
    arith_expr() t = rel_expr1()/*@bgen(jjtree)*/
                                 {
                                   jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                                   jjtc000 = false;
                                   jjtn000.jjtSetLastToken(getToken(0));
                                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

Token rel_expr1()       :
{Token t;}
{
  t = relational_op() arith_expr() {return t;} | empty() {return new Token();}
}

Token relational_op()       :
{Token t;}
{
    t = <LANGLE> {return t;} | t = <RANGLE> {return t;} | t = <RELATIONAL_OP> {return t;}
}

void arith_expr()              :
{/*@bgen(jjtree) #ADD_SUB(> 1) */
 ASTADD_SUB jjtn000 = new ASTADD_SUB(JJTADD_SUB);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) #ADD_SUB(> 1) */
  try {
/*@egen*/
  term() t = C()/*@bgen(jjtree)*/
                 {
                   jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                   jjtc000 = false;
                   jjtn000.jjtSetLastToken(getToken(0));
                 }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
  } catch (Throwable jjte000) {
    if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      throw (RuntimeException)jjte000;
    }
    if (jjte000 instanceof ParseException) {
      throw (ParseException)jjte000;
    }
    throw (Error)jjte000;
  } finally {
    if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
      jjtn000.jjtSetLastToken(getToken(0));
    }
  }
/*@egen*/
}

Token C()       :
{Token t;}
{
  t = < ADD_SUB > term() C() {return t;} | empty() {return new Token();}
}

void term()              :
{/*@bgen(jjtree) #MUL_DIV(> 1) */
 ASTMUL_DIV jjtn000 = new ASTMUL_DIV(JJTMUL_DIV);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) #MUL_DIV(> 1) */
    try {
/*@egen*/
    neg_expr() t = D()/*@bgen(jjtree)*/
                       {
                         jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
                         jjtc000 = false;
                         jjtn000.jjtSetLastToken(getToken(0));
                       }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, jjtree.nodeArity() > 1);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

Token D()       :
{Token t;}
{
    t = < MUL_DIV > atomic_expr() D() {return t;} | empty() {return new Token();}
}

void neg_expr()       :
{Token t;}
{
   < NEG >/*@bgen(jjtree) NEG_EXPR */
           {
             ASTNEG_EXPR jjtn001 = new ASTNEG_EXPR(JJTNEG_EXPR);
             boolean jjtc001 = true;
             jjtree.openNodeScope(jjtn001);
             jjtn001.jjtSetFirstToken(getToken(1));
           }
           try {
/*@egen*/ atomic_expr()/*@bgen(jjtree)*/
           } catch (Throwable jjte001) {
             if (jjtc001) {
               jjtree.clearNodeScope(jjtn001);
               jjtc001 = false;
             } else {
               jjtree.popNode();
             }
             if (jjte001 instanceof RuntimeException) {
               throw (RuntimeException)jjte001;
             }
             if (jjte001 instanceof ParseException) {
               throw (ParseException)jjte001;
             }
             throw (Error)jjte001;
           } finally {
             if (jjtc001) {
               jjtree.closeNodeScope(jjtn001, true);
               jjtn001.jjtSetLastToken(getToken(0));
             }
           }
/*@egen*/           | atomic_expr()
}

void atomic_expr()       :
{}
{
    < LPAREN > expr() < RPAREN > | value()
}

void value()       :
{Token t;}
{
    variable_or_function() | inum_val() | fnum_val() | bool_val() | constant_val() | color_val() | label_val()
}

void inum_val()           :
{/*@bgen(jjtree) INUM_VAL */
 ASTINUM_VAL jjtn000 = new ASTINUM_VAL(JJTINUM_VAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) INUM_VAL */
    try {
/*@egen*/
    t = <INUM_VAL>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void fnum_val()           :
{/*@bgen(jjtree) FNUM_VAL */
 ASTFNUM_VAL jjtn000 = new ASTFNUM_VAL(JJTFNUM_VAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) FNUM_VAL */
    try {
/*@egen*/
    t = <FNUM_VAL>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void bool_val()           :
{/*@bgen(jjtree) BOOL_VAL */
 ASTBOOL_VAL jjtn000 = new ASTBOOL_VAL(JJTBOOL_VAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) BOOL_VAL */
    try {
/*@egen*/
    t = <BOOL_VAL>/*@bgen(jjtree)*/
                   {
                     jjtree.closeNodeScope(jjtn000, true);
                     jjtc000 = false;
                     jjtn000.jjtSetLastToken(getToken(0));
                   }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void constant_val()               :
{/*@bgen(jjtree) CONSTANT_VAL */
 ASTCONSTANT_VAL jjtn000 = new ASTCONSTANT_VAL(JJTCONSTANT_VAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) CONSTANT_VAL */
    try {
/*@egen*/
    t = <CONSTANTS>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.jjtSetLastToken(getToken(0));
                    }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void color_val()            :
{/*@bgen(jjtree) COLOR_VAL */
 ASTCOLOR_VAL jjtn000 = new ASTCOLOR_VAL(JJTCOLOR_VAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) COLOR_VAL */
    try {
/*@egen*/
    t = <COLOR_VAL>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.jjtSetLastToken(getToken(0));
                    }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void label_val()            :
{/*@bgen(jjtree) LABEL_VAL */
 ASTLABEL_VAL jjtn000 = new ASTLABEL_VAL(JJTLABEL_VAL);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) LABEL_VAL */
    try {
/*@egen*/
    t = <LABEL_VAL>/*@bgen(jjtree)*/
                    {
                      jjtree.closeNodeScope(jjtn000, true);
                      jjtc000 = false;
                      jjtn000.jjtSetLastToken(getToken(0));
                    }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void variable_or_function()       :
{int varFieldFunc = 0;}
{/*@bgen(jjtree) #FUNCTION_CALL( varFieldFunc == 2) */
    {
      ASTFUNCTION_CALL jjtn002 = new ASTFUNCTION_CALL(JJTFUNCTION_CALL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    (/*@bgen(jjtree) #VARIABLE( varFieldFunc == 0 || varFieldFunc == 1) */
     {
       ASTVARIABLE jjtn001 = new ASTVARIABLE(JJTVARIABLE);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(identifier() varFieldFunc = variable_or_function_tail())/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  varFieldFunc == 0 || varFieldFunc == 1);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                                                  )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  varFieldFunc == 2);
        jjtn002.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                                  
}

int variable_or_function_tail()       :
{}
{
    field_access() {return 1;} | function_call() {return 2;} | empty() {return 0;}
}

void field_access()       :
{int varFieldFunc = 0;}
{/*@bgen(jjtree) #FUNCTION_CALL( varFieldFunc == 2) */
    {
      ASTFUNCTION_CALL jjtn002 = new ASTFUNCTION_CALL(JJTFUNCTION_CALL);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    (/*@bgen(jjtree) #FIELD_ACCESS( varFieldFunc == 0 || varFieldFunc == 1) */
     {
       ASTFIELD_ACCESS jjtn001 = new ASTFIELD_ACCESS(JJTFIELD_ACCESS);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(<DOT> identifier() varFieldFunc = variable_or_function_tail())/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  varFieldFunc == 0 || varFieldFunc == 1);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                                                      )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  varFieldFunc == 2);
        jjtn002.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                                  
}

void function_call()       :
{}
{
    <LPAREN> actual_parameters() <RPAREN> function_tail()
}

void function_tail()       :
{}
{
    field_access() | empty()
}

void actual_parameters()                    :
{/*@bgen(jjtree) ACTUAL_PARAMETERS */
  ASTACTUAL_PARAMETERS jjtn000 = new ASTACTUAL_PARAMETERS(JJTACTUAL_PARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ACTUAL_PARAMETERS */
    try {
/*@egen*/
    actual_parameter_list() | empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void actual_parameter_list()       :
{}
{
    expr() actual_parameter_list1()
}

void actual_parameter_list1()       :
{}
{
    < COMMA > actual_parameter_list() | empty()
}

void main()       :
{/*@bgen(jjtree) MAIN */
  ASTMAIN jjtn000 = new ASTMAIN(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MAIN */
    try {
/*@egen*/
    <FUNCTION > < MAIN > < LPAREN > < RPAREN > < NEWLINE >/*@bgen(jjtree) BLOCK */
                                                           {
                                                             ASTBLOCK jjtn001 = new ASTBLOCK(JJTBLOCK);
                                                             boolean jjtc001 = true;
                                                             jjtree.openNodeScope(jjtn001);
                                                             jjtn001.jjtSetFirstToken(getToken(1));
                                                           }
                                                           try {
/*@egen*/ block()/*@bgen(jjtree)*/
                                                           } catch (Throwable jjte001) {
                                                             if (jjtc001) {
                                                               jjtree.clearNodeScope(jjtn001);
                                                               jjtc001 = false;
                                                             } else {
                                                               jjtree.popNode();
                                                             }
                                                             if (jjte001 instanceof RuntimeException) {
                                                               throw (RuntimeException)jjte001;
                                                             }
                                                             if (jjte001 instanceof ParseException) {
                                                               throw (ParseException)jjte001;
                                                             }
                                                             throw (Error)jjte001;
                                                           } finally {
                                                             if (jjtc001) {
                                                               jjtree.closeNodeScope(jjtn001, true);
                                                               jjtn001.jjtSetLastToken(getToken(0));
                                                             }
                                                           }
/*@egen*/        < END >/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void block()       :
{}
{
    block_content() < NEWLINE > block() | empty()
}

void block_content()       :
{}
{
    dcl() | stmt() | empty()
}

void dcl()       :
{}
{
    simple_types_dcl() | create()
}

void create()       :
{}
{
    < CREATE > adt() < END >
}

void adt()       :
{}
{
    graph_adt() | collection_adt() | map_adt()
}

void graph_adt()            :
{/*@bgen(jjtree) GRAPH_DCL */
  ASTGRAPH_DCL jjtn000 = new ASTGRAPH_DCL(JJTGRAPH_DCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) GRAPH_DCL */
    try {
/*@egen*/
    graph_type() identifier() graph_dcl()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void graph_type()             :
{/*@bgen(jjtree) GRAPH_TYPE */
 ASTGRAPH_TYPE jjtn000 = new ASTGRAPH_TYPE(JJTGRAPH_TYPE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);
 jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/Token t;}
{/*@bgen(jjtree) GRAPH_TYPE */
    try {
/*@egen*/
    t = <GRAPH_TYPE>/*@bgen(jjtree)*/
                     {
                       jjtree.closeNodeScope(jjtn000, true);
                       jjtc000 = false;
                       jjtn000.jjtSetLastToken(getToken(0));
                     }
/*@egen*/ {jjtn000.value = t.image;}/*@bgen(jjtree)*/
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void graph_dcl()       :
{}
{/*@bgen(jjtree) GRAPH_ASSIGN */
    {
      ASTGRAPH_ASSIGN jjtn001 = new ASTGRAPH_ASSIGN(JJTGRAPH_ASSIGN);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    (< ASSIGN > variable_or_function())/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/               |/*@bgen(jjtree) GRAPH_DCL_ELEMENTS */
                                                        {
                                                          ASTGRAPH_DCL_ELEMENTS jjtn002 = new ASTGRAPH_DCL_ELEMENTS(JJTGRAPH_DCL_ELEMENTS);
                                                          boolean jjtc002 = true;
                                                          jjtree.openNodeScope(jjtn002);
                                                          jjtn002.jjtSetFirstToken(getToken(1));
                                                        }
                                                        try {
/*@egen*/ (newlines_plus() graph_vertex_dcl() newlines_plus() graph_elements())/*@bgen(jjtree)*/
                                                        } catch (Throwable jjte002) {
                                                          if (jjtc002) {
                                                            jjtree.clearNodeScope(jjtn002);
                                                            jjtc002 = false;
                                                          } else {
                                                            jjtree.popNode();
                                                          }
                                                          if (jjte002 instanceof RuntimeException) {
                                                            throw (RuntimeException)jjte002;
                                                          }
                                                          if (jjte002 instanceof ParseException) {
                                                            throw (ParseException)jjte002;
                                                          }
                                                          throw (Error)jjte002;
                                                        } finally {
                                                          if (jjtc002) {
                                                            jjtree.closeNodeScope(jjtn002, true);
                                                            jjtn002.jjtSetLastToken(getToken(0));
                                                          }
                                                        }
/*@egen*/                     | empty()
}

void graph_elements()       :
{}
{
    graph_vertex_dcl() newlines_plus() graph_elements() | empty()
}

void graph_vertex_dcl()                   :
{/*@bgen(jjtree) GRAPH_VERTEX_DCL */
  ASTGRAPH_VERTEX_DCL jjtn000 = new ASTGRAPH_VERTEX_DCL(JJTGRAPH_VERTEX_DCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) GRAPH_VERTEX_DCL */
    try {
/*@egen*/
    identifier() edge_dcl()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void edge_dcl()       :
{}
{
    < CONNECTION > graph_vertex_dcl1() | empty()
}

void graph_vertex_dcl1()       :
{}
{
    < LCURLY >/*@bgen(jjtree) VERTEX_LIST */
               {
                 ASTVERTEX_LIST jjtn001 = new ASTVERTEX_LIST(JJTVERTEX_LIST);
                 boolean jjtc001 = true;
                 jjtree.openNodeScope(jjtn001);
                 jjtn001.jjtSetFirstToken(getToken(1));
               }
               try {
/*@egen*/ vertex_list()/*@bgen(jjtree)*/
               } catch (Throwable jjte001) {
                 if (jjtc001) {
                   jjtree.clearNodeScope(jjtn001);
                   jjtc001 = false;
                 } else {
                   jjtree.popNode();
                 }
                 if (jjte001 instanceof RuntimeException) {
                   throw (RuntimeException)jjte001;
                 }
                 if (jjte001 instanceof ParseException) {
                   throw (ParseException)jjte001;
                 }
                 throw (Error)jjte001;
               } finally {
                 if (jjtc001) {
                   jjtree.closeNodeScope(jjtn001, true);
                   jjtn001.jjtSetLastToken(getToken(0));
                 }
               }
/*@egen*/              < RCURLY > | identifier() weight()
}

void vertex_list()       :
{}
{/*@bgen(jjtree) VERTEX */
    {
      ASTVERTEX jjtn001 = new ASTVERTEX(JJTVERTEX);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    (identifier() weight())/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/         vertex_list_continuous()
}

void vertex_list_continuous()       :
{}
{
    < COMMA > vertex_list() | empty()
}

void weight()         :
{/*@bgen(jjtree) WEIGHT */
  ASTWEIGHT jjtn000 = new ASTWEIGHT(JJTWEIGHT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) WEIGHT */
    try {
/*@egen*/
    < LHARD > arith_expr() < RHARD > | empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void stmt()       :
{boolean isAssign = false;}
{/*@bgen(jjtree) #FUNCTION_CALL_STMT( ! isAssign) */
    {
      ASTFUNCTION_CALL_STMT jjtn002 = new ASTFUNCTION_CALL_STMT(JJTFUNCTION_CALL_STMT);
      boolean jjtc002 = true;
      jjtree.openNodeScope(jjtn002);
      jjtn002.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    (/*@bgen(jjtree) #ASSIGN( isAssign) */
     {
       ASTASSIGN jjtn001 = new ASTASSIGN(JJTASSIGN);
       boolean jjtc001 = true;
       jjtree.openNodeScope(jjtn001);
       jjtn001.jjtSetFirstToken(getToken(1));
     }
     try {
/*@egen*/(variable_or_function() isAssign = assign_or_func())/*@bgen(jjtree)*/
     } catch (Throwable jjte001) {
       if (jjtc001) {
         jjtree.clearNodeScope(jjtn001);
         jjtc001 = false;
       } else {
         jjtree.popNode();
       }
       if (jjte001 instanceof RuntimeException) {
         throw (RuntimeException)jjte001;
       }
       if (jjte001 instanceof ParseException) {
         throw (ParseException)jjte001;
       }
       throw (Error)jjte001;
     } finally {
       if (jjtc001) {
         jjtree.closeNodeScope(jjtn001,  isAssign);
         jjtn001.jjtSetLastToken(getToken(0));
       }
     }
/*@egen*/                  )/*@bgen(jjtree)*/
    } catch (Throwable jjte002) {
      if (jjtc002) {
        jjtree.clearNodeScope(jjtn002);
        jjtc002 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte002 instanceof RuntimeException) {
        throw (RuntimeException)jjte002;
      }
      if (jjte002 instanceof ParseException) {
        throw (ParseException)jjte002;
      }
      throw (Error)jjte002;
    } finally {
      if (jjtc002) {
        jjtree.closeNodeScope(jjtn002,  ! isAssign);
        jjtn002.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                                | loop() | if_statement() | return_statement()
}

boolean assign_or_func()       :
{}
{
    assignment() {return true;} | empty() {return false;}
}

void assignment()       :
{}
{
    < ASSIGN > expr()
}

void loop()       :
{}
{
  while_statement() | for_statement() | foreach_statement()
}

void while_statement()                  :
{/*@bgen(jjtree) WHILE_STATEMENT */
  ASTWHILE_STATEMENT jjtn000 = new ASTWHILE_STATEMENT(JJTWHILE_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) WHILE_STATEMENT */
    try {
/*@egen*/
    < WHILE > expr() < DO > < NEWLINE >/*@bgen(jjtree) BLOCK */
                                        {
                                          ASTBLOCK jjtn001 = new ASTBLOCK(JJTBLOCK);
                                          boolean jjtc001 = true;
                                          jjtree.openNodeScope(jjtn001);
                                          jjtn001.jjtSetFirstToken(getToken(1));
                                        }
                                        try {
/*@egen*/ block()/*@bgen(jjtree)*/
                                        } catch (Throwable jjte001) {
                                          if (jjtc001) {
                                            jjtree.clearNodeScope(jjtn001);
                                            jjtc001 = false;
                                          } else {
                                            jjtree.popNode();
                                          }
                                          if (jjte001 instanceof RuntimeException) {
                                            throw (RuntimeException)jjte001;
                                          }
                                          if (jjte001 instanceof ParseException) {
                                            throw (ParseException)jjte001;
                                          }
                                          throw (Error)jjte001;
                                        } finally {
                                          if (jjtc001) {
                                            jjtree.closeNodeScope(jjtn001, true);
                                            jjtn001.jjtSetLastToken(getToken(0));
                                          }
                                        }
/*@egen*/        < END >/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void for_statement()                :
{/*@bgen(jjtree) FOR_STATEMENT */
  ASTFOR_STATEMENT jjtn000 = new ASTFOR_STATEMENT(JJTFOR_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FOR_STATEMENT */
    try {
/*@egen*/
    < FOR > identifier() < ASSIGN > integer_value() < TO > integer_value() < DO > < NEWLINE >/*@bgen(jjtree) BLOCK */
                                                                                              {
                                                                                                ASTBLOCK jjtn001 = new ASTBLOCK(JJTBLOCK);
                                                                                                boolean jjtc001 = true;
                                                                                                jjtree.openNodeScope(jjtn001);
                                                                                                jjtn001.jjtSetFirstToken(getToken(1));
                                                                                              }
                                                                                              try {
/*@egen*/ block()/*@bgen(jjtree)*/
                                                                                              } catch (Throwable jjte001) {
                                                                                                if (jjtc001) {
                                                                                                  jjtree.clearNodeScope(jjtn001);
                                                                                                  jjtc001 = false;
                                                                                                } else {
                                                                                                  jjtree.popNode();
                                                                                                }
                                                                                                if (jjte001 instanceof RuntimeException) {
                                                                                                  throw (RuntimeException)jjte001;
                                                                                                }
                                                                                                if (jjte001 instanceof ParseException) {
                                                                                                  throw (ParseException)jjte001;
                                                                                                }
                                                                                                throw (Error)jjte001;
                                                                                              } finally {
                                                                                                if (jjtc001) {
                                                                                                  jjtree.closeNodeScope(jjtn001, true);
                                                                                                  jjtn001.jjtSetLastToken(getToken(0));
                                                                                                }
                                                                                              }
/*@egen*/        < END >/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void integer_value()       :
{}
{
    variable_or_function() | inum_val()
}

void foreach_statement()                    :
{/*@bgen(jjtree) FOREACH_STATEMENT */
  ASTFOREACH_STATEMENT jjtn000 = new ASTFOREACH_STATEMENT(JJTFOREACH_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FOREACH_STATEMENT */
    try {
/*@egen*/
    < FOREACH > identifier() < IN > variable_or_function() < DO > < NEWLINE >/*@bgen(jjtree) BLOCK */
                                                                              {
                                                                                ASTBLOCK jjtn001 = new ASTBLOCK(JJTBLOCK);
                                                                                boolean jjtc001 = true;
                                                                                jjtree.openNodeScope(jjtn001);
                                                                                jjtn001.jjtSetFirstToken(getToken(1));
                                                                              }
                                                                              try {
/*@egen*/ block()/*@bgen(jjtree)*/
                                                                              } catch (Throwable jjte001) {
                                                                                if (jjtc001) {
                                                                                  jjtree.clearNodeScope(jjtn001);
                                                                                  jjtc001 = false;
                                                                                } else {
                                                                                  jjtree.popNode();
                                                                                }
                                                                                if (jjte001 instanceof RuntimeException) {
                                                                                  throw (RuntimeException)jjte001;
                                                                                }
                                                                                if (jjte001 instanceof ParseException) {
                                                                                  throw (ParseException)jjte001;
                                                                                }
                                                                                throw (Error)jjte001;
                                                                              } finally {
                                                                                if (jjtc001) {
                                                                                  jjtree.closeNodeScope(jjtn001, true);
                                                                                  jjtn001.jjtSetLastToken(getToken(0));
                                                                                }
                                                                              }
/*@egen*/        < END >/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void if_statement()               :
{/*@bgen(jjtree) IF_STATEMENT */
  ASTIF_STATEMENT jjtn000 = new ASTIF_STATEMENT(JJTIF_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) IF_STATEMENT */
    try {
/*@egen*/
    < IF > expr() < THEN > <NEWLINE>/*@bgen(jjtree) BLOCK */
                                     {
                                       ASTBLOCK jjtn001 = new ASTBLOCK(JJTBLOCK);
                                       boolean jjtc001 = true;
                                       jjtree.openNodeScope(jjtn001);
                                       jjtn001.jjtSetFirstToken(getToken(1));
                                     }
                                     try {
/*@egen*/ block()/*@bgen(jjtree)*/
                                     } catch (Throwable jjte001) {
                                       if (jjtc001) {
                                         jjtree.clearNodeScope(jjtn001);
                                         jjtc001 = false;
                                       } else {
                                         jjtree.popNode();
                                       }
                                       if (jjte001 instanceof RuntimeException) {
                                         throw (RuntimeException)jjte001;
                                       }
                                       if (jjte001 instanceof ParseException) {
                                         throw (ParseException)jjte001;
                                       }
                                       throw (Error)jjte001;
                                     } finally {
                                       if (jjtc001) {
                                         jjtree.closeNodeScope(jjtn001, true);
                                         jjtn001.jjtSetLastToken(getToken(0));
                                       }
                                     }
/*@egen*/        else_statement()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void else_statement()                 :
{/*@bgen(jjtree) ELSE_STATEMENT */
  ASTELSE_STATEMENT jjtn000 = new ASTELSE_STATEMENT(JJTELSE_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) ELSE_STATEMENT */
    try {
/*@egen*/
    < ELSE >/*@bgen(jjtree) BLOCK */
             {
               ASTBLOCK jjtn001 = new ASTBLOCK(JJTBLOCK);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtn001.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/ block()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtn001.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/        < END > | < END >/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void return_statement()              :
{/*@bgen(jjtree) RETURN_STMT */
  ASTRETURN_STMT jjtn000 = new ASTRETURN_STMT(JJTRETURN_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RETURN_STMT */
    try {
/*@egen*/
    < RETURN > return_expr()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void return_expr()       :
{}
{
    expr() | empty()
}

void collection_adt()                 :
{/*@bgen(jjtree) COLLECTION_ADT */
  ASTCOLLECTION_ADT jjtn000 = new ASTCOLLECTION_ADT(JJTCOLLECTION_ADT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) COLLECTION_ADT */
    try {
/*@egen*/
    collection_type() identifier() collection_dcl()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void collection_dcl()       :
{}
{
   < ASSIGN >/*@bgen(jjtree) COLLECTION_ASSIGN */
              {
                ASTCOLLECTION_ASSIGN jjtn001 = new ASTCOLLECTION_ASSIGN(JJTCOLLECTION_ASSIGN);
                boolean jjtc001 = true;
                jjtree.openNodeScope(jjtn001);
                jjtn001.jjtSetFirstToken(getToken(1));
              }
              try {
/*@egen*/ variable_or_function()/*@bgen(jjtree)*/
              } catch (Throwable jjte001) {
                if (jjtc001) {
                  jjtree.clearNodeScope(jjtn001);
                  jjtc001 = false;
                } else {
                  jjtree.popNode();
                }
                if (jjte001 instanceof RuntimeException) {
                  throw (RuntimeException)jjte001;
                }
                if (jjte001 instanceof ParseException) {
                  throw (ParseException)jjte001;
                }
                throw (Error)jjte001;
              } finally {
                if (jjtc001) {
                  jjtree.closeNodeScope(jjtn001, true);
                  jjtn001.jjtSetLastToken(getToken(0));
                }
              }
/*@egen*/                    | newlines_plus()/*@bgen(jjtree) ELEMENT_LIST */
                                                                          {
                                                                            ASTELEMENT_LIST jjtn002 = new ASTELEMENT_LIST(JJTELEMENT_LIST);
                                                                            boolean jjtc002 = true;
                                                                            jjtree.openNodeScope(jjtn002);
                                                                            jjtn002.jjtSetFirstToken(getToken(1));
                                                                          }
                                                                          try {
/*@egen*/ element_list()/*@bgen(jjtree)*/
                                                                          } catch (Throwable jjte002) {
                                                                            if (jjtc002) {
                                                                              jjtree.clearNodeScope(jjtn002);
                                                                              jjtc002 = false;
                                                                            } else {
                                                                              jjtree.popNode();
                                                                            }
                                                                            if (jjte002 instanceof RuntimeException) {
                                                                              throw (RuntimeException)jjte002;
                                                                            }
                                                                            if (jjte002 instanceof ParseException) {
                                                                              throw (ParseException)jjte002;
                                                                            }
                                                                            throw (Error)jjte002;
                                                                          } finally {
                                                                            if (jjtc002) {
                                                                              jjtree.closeNodeScope(jjtn002, true);
                                                                              jjtn002.jjtSetLastToken(getToken(0));
                                                                            }
                                                                          }
/*@egen*/               | empty()
}

void element_list()       :
{}
{
    value() newlines_plus() element_list_continuous()
}

void element_list_continuous()       :
{}
{
    element_list() | empty()
}

void map_adt()          :
{/*@bgen(jjtree) MAP_ADT */
  ASTMAP_ADT jjtn000 = new ASTMAP_ADT(JJTMAP_ADT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) MAP_ADT */
    try {
/*@egen*/
    <MAP> <LANGLE> type() <COMMA> type() <RANGLE> identifier() map_dcl()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void map_dcl()       :
{}
{
    <ASSIGN>/*@bgen(jjtree) MAP_ASSIGN */
             {
               ASTMAP_ASSIGN jjtn001 = new ASTMAP_ASSIGN(JJTMAP_ASSIGN);
               boolean jjtc001 = true;
               jjtree.openNodeScope(jjtn001);
               jjtn001.jjtSetFirstToken(getToken(1));
             }
             try {
/*@egen*/ variable_or_function()/*@bgen(jjtree)*/
             } catch (Throwable jjte001) {
               if (jjtc001) {
                 jjtree.clearNodeScope(jjtn001);
                 jjtc001 = false;
               } else {
                 jjtree.popNode();
               }
               if (jjte001 instanceof RuntimeException) {
                 throw (RuntimeException)jjte001;
               }
               if (jjte001 instanceof ParseException) {
                 throw (ParseException)jjte001;
               }
               throw (Error)jjte001;
             } finally {
               if (jjtc001) {
                 jjtree.closeNodeScope(jjtn001, true);
                 jjtn001.jjtSetLastToken(getToken(0));
               }
             }
/*@egen*/             | newlines_plus()/*@bgen(jjtree) MAP_ELEMENT_LIST */
                                                                  {
                                                                    ASTMAP_ELEMENT_LIST jjtn002 = new ASTMAP_ELEMENT_LIST(JJTMAP_ELEMENT_LIST);
                                                                    boolean jjtc002 = true;
                                                                    jjtree.openNodeScope(jjtn002);
                                                                    jjtn002.jjtSetFirstToken(getToken(1));
                                                                  }
                                                                  try {
/*@egen*/ map_element_list()/*@bgen(jjtree)*/
                                                                  } catch (Throwable jjte002) {
                                                                    if (jjtc002) {
                                                                      jjtree.clearNodeScope(jjtn002);
                                                                      jjtc002 = false;
                                                                    } else {
                                                                      jjtree.popNode();
                                                                    }
                                                                    if (jjte002 instanceof RuntimeException) {
                                                                      throw (RuntimeException)jjte002;
                                                                    }
                                                                    if (jjte002 instanceof ParseException) {
                                                                      throw (ParseException)jjte002;
                                                                    }
                                                                    throw (Error)jjte002;
                                                                  } finally {
                                                                    if (jjtc002) {
                                                                      jjtree.closeNodeScope(jjtn002, true);
                                                                      jjtn002.jjtSetLastToken(getToken(0));
                                                                    }
                                                                  }
/*@egen*/                   | empty()
}

void map_element_list()       :
{}
{/*@bgen(jjtree) KEY_VALUE_PAIR */
    {
      ASTKEY_VALUE_PAIR jjtn001 = new ASTKEY_VALUE_PAIR(JJTKEY_VALUE_PAIR);
      boolean jjtc001 = true;
      jjtree.openNodeScope(jjtn001);
      jjtn001.jjtSetFirstToken(getToken(1));
    }
    try {
/*@egen*/
    (value() <CONNECTION> value())/*@bgen(jjtree)*/
    } catch (Throwable jjte001) {
      if (jjtc001) {
        jjtree.clearNodeScope(jjtn001);
        jjtc001 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte001 instanceof RuntimeException) {
        throw (RuntimeException)jjte001;
      }
      if (jjte001 instanceof ParseException) {
        throw (ParseException)jjte001;
      }
      throw (Error)jjte001;
    } finally {
      if (jjtc001) {
        jjtree.closeNodeScope(jjtn001, true);
        jjtn001.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/                 newlines_plus() map_element_list_continuous()
}

void map_element_list_continuous()       :
{}
{
    map_element_list() | empty()
}

void funcs_dcl()       :
{}
{
    func_dcl() newlines_plus() funcs_dcl() | empty()
}

void func_dcl()           :
{/*@bgen(jjtree) FUNC_DCL */
  ASTFUNC_DCL jjtn000 = new ASTFUNC_DCL(JJTFUNC_DCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FUNC_DCL */
    try {
/*@egen*/
    ret() < FUNCTION > identifier() < LPAREN > formal_parameters() < RPAREN > <NEWLINE>/*@bgen(jjtree) BLOCK */
                                                                                        {
                                                                                          ASTBLOCK jjtn001 = new ASTBLOCK(JJTBLOCK);
                                                                                          boolean jjtc001 = true;
                                                                                          jjtree.openNodeScope(jjtn001);
                                                                                          jjtn001.jjtSetFirstToken(getToken(1));
                                                                                        }
                                                                                        try {
/*@egen*/ block()/*@bgen(jjtree)*/
                                                                                        } catch (Throwable jjte001) {
                                                                                          if (jjtc001) {
                                                                                            jjtree.clearNodeScope(jjtn001);
                                                                                            jjtc001 = false;
                                                                                          } else {
                                                                                            jjtree.popNode();
                                                                                          }
                                                                                          if (jjte001 instanceof RuntimeException) {
                                                                                            throw (RuntimeException)jjte001;
                                                                                          }
                                                                                          if (jjte001 instanceof ParseException) {
                                                                                            throw (ParseException)jjte001;
                                                                                          }
                                                                                          throw (Error)jjte001;
                                                                                        } finally {
                                                                                          if (jjtc001) {
                                                                                            jjtree.closeNodeScope(jjtn001, true);
                                                                                            jjtn001.jjtSetLastToken(getToken(0));
                                                                                          }
                                                                                        }
/*@egen*/        < END >/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void ret()              :
{/*@bgen(jjtree) RETURN_TYPE */
  ASTRETURN_TYPE jjtn000 = new ASTRETURN_TYPE(JJTRETURN_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) RETURN_TYPE */
    try {
/*@egen*/
    type() | empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void formal_parameters()                    :
{/*@bgen(jjtree) FORMAL_PARAMETERS */
  ASTFORMAL_PARAMETERS jjtn000 = new ASTFORMAL_PARAMETERS(JJTFORMAL_PARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FORMAL_PARAMETERS */
    try {
/*@egen*/
    formal_parameter_list() | empty()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void formal_parameter_list()       :
{}
{
    formal_parameter() formal_parameter_list1()
}

void formal_parameter_list1()       :
{}
{
    < COMMA > formal_parameter_list() | empty()
}

void formal_parameter()                   :
{/*@bgen(jjtree) FORMAL_PARAMETER */
  ASTFORMAL_PARAMETER jjtn000 = new ASTFORMAL_PARAMETER(JJTFORMAL_PARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
  jjtn000.jjtSetFirstToken(getToken(1));
/*@egen*/}
{/*@bgen(jjtree) FORMAL_PARAMETER */
    try {
/*@egen*/
    type() identifier()/*@bgen(jjtree)*/
    } catch (Throwable jjte000) {
      if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        throw (RuntimeException)jjte000;
      }
      if (jjte000 instanceof ParseException) {
        throw (ParseException)jjte000;
      }
      throw (Error)jjte000;
    } finally {
      if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
        jjtn000.jjtSetLastToken(getToken(0));
      }
    }
/*@egen*/
}

void type()       :
{}
{
    object_types() | simple_types()
}

void empty()       : {}
{
     {}
}