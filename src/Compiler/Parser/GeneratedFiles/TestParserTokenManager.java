/* TestParserTokenManager.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. TestParserTokenManager.java */
package Compiler.Parser.GeneratedFiles;
import Compiler.Parser.CustomVisitors.FunctionVisitor;
import Compiler.Parser.CustomVisitors.PrintVisitor;
import Compiler.Parser.CustomVisitors.StaticSemanticsVisitor;
import Compiler.Parser.CustomVisitors.TreeOptimizerVisitor;
import Compiler.Parser.TreePrinter;
import Compiler.SymbolTable.Table.SymbolTable;
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;

/** Token Manager. */
@SuppressWarnings("unused")public class TestParserTokenManager implements TestParserConstants {

  /** Debug output. */
  public  java.io.PrintStream debugStream = System.out;
  /** Set debug output. */
  public  void setDebugStream(java.io.PrintStream ds) { debugStream = ds; }
private final int jjStopStringLiteralDfa_0(int pos, long active0){
   switch (pos)
   {
      case 0:
         if ((active0 & 0x6000000000008000L) != 0L)
            return 35;
         if ((active0 & 0x2000000000L) != 0L)
         {
            jjmatchedKind = 70;
            return 17;
         }
         if ((active0 & 0xd00000L) != 0L)
         {
            jjmatchedKind = 70;
            return 10;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            jjmatchedKind = 70;
            return 82;
         }
         if ((active0 & 0x80004000000L) != 0L)
         {
            jjmatchedKind = 70;
            return 6;
         }
         if ((active0 & 0x1b5d80b204300L) != 0L)
         {
            jjmatchedKind = 70;
            return 58;
         }
         if ((active0 & 0x90000L) != 0L)
            return 32;
         if ((active0 & 0x400000000L) != 0L)
         {
            jjmatchedKind = 53;
            return -1;
         }
         if ((active0 & 0x20L) != 0L)
         {
            jjmatchedKind = 55;
            return 0;
         }
         return -1;
      case 1:
         if ((active0 & 0xc4003000000L) != 0L)
            return 58;
         if ((active0 & 0x2000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 1;
            }
            return 16;
         }
         if ((active0 & 0x400000000L) != 0L)
         {
            if (jjmatchedPos == 0)
            {
               jjmatchedKind = 53;
               jjmatchedPos = 0;
            }
            return -1;
         }
         if ((active0 & 0x1b1980cf04300L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 1;
            }
            return 58;
         }
         if ((active0 & 0x400000000000L) != 0L)
         {
            if (jjmatchedPos != 1)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 1;
            }
            return 87;
         }
         return -1;
      case 2:
         if ((active0 & 0x604000c00200L) != 0L)
            return 58;
         if ((active0 & 0x191b80c304100L) != 0L)
         {
            if (jjmatchedPos != 2)
            {
               jjmatchedKind = 70;
               jjmatchedPos = 2;
            }
            return 58;
         }
         return -1;
      case 3:
         if ((active0 & 0x900c004000L) != 0L)
            return 58;
         if ((active0 & 0x1912800b00100L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 3;
            return 58;
         }
         return -1;
      case 4:
         if ((active0 & 0x1800000200000L) != 0L)
            return 58;
         if ((active0 & 0x112800900100L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 4;
            return 58;
         }
         return -1;
      case 5:
         if ((active0 & 0x102800000100L) != 0L)
            return 58;
         if ((active0 & 0x10000900000L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 5;
            return 58;
         }
         return -1;
      case 6:
         if ((active0 & 0x10000800000L) != 0L)
            return 58;
         if ((active0 & 0x100000L) != 0L)
         {
            jjmatchedKind = 70;
            jjmatchedPos = 6;
            return 58;
         }
         return -1;
      default :
         return -1;
   }
}
private final int jjStartNfa_0(int pos, long active0){
   return jjMoveNfa_0(jjStopStringLiteralDfa_0(pos, active0), pos + 1);
}
private int jjStopAtPos(int pos, int kind)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   return pos + 1;
}
private int jjMoveStringLiteralDfa0_0(){
   switch(curChar)
   {
      case 9:
         return jjStopAtPos(0, 3);
      case 10:
         return jjStopAtPos(0, 11);
      case 32:
         return jjStopAtPos(0, 1);
      case 33:
         return jjStartNfaWithStates_0(0, 19, 32);
      case 38:
         return jjStopAtPos(0, 17);
      case 40:
         return jjStopAtPos(0, 32);
      case 41:
         return jjStopAtPos(0, 33);
      case 44:
         return jjStopAtPos(0, 12);
      case 45:
         return jjMoveStringLiteralDfa1_0(0x400000000L);
      case 46:
         return jjStopAtPos(0, 13);
      case 47:
         return jjMoveStringLiteralDfa1_0(0x20L);
      case 60:
         jjmatchedKind = 61;
         return jjMoveStringLiteralDfa1_0(0x8000L);
      case 61:
         return jjStartNfaWithStates_0(0, 16, 32);
      case 62:
         return jjStartNfaWithStates_0(0, 62, 35);
      case 67:
         return jjMoveStringLiteralDfa1_0(0x800000000000L);
      case 68:
         return jjMoveStringLiteralDfa1_0(0x2000000000L);
      case 69:
         return jjMoveStringLiteralDfa1_0(0x1000000000L);
      case 77:
         return jjMoveStringLiteralDfa1_0(0x400000000000L);
      case 86:
         return jjMoveStringLiteralDfa1_0(0x800000000L);
      case 91:
         return jjStopAtPos(0, 30);
      case 93:
         return jjStopAtPos(0, 31);
      case 98:
         return jjMoveStringLiteralDfa1_0(0x10000000000L);
      case 99:
         return jjMoveStringLiteralDfa1_0(0x100L);
      case 100:
         return jjMoveStringLiteralDfa1_0(0x240000000000L);
      case 101:
         return jjMoveStringLiteralDfa1_0(0x8000200L);
      case 102:
         return jjMoveStringLiteralDfa1_0(0xd00000L);
      case 105:
         return jjMoveStringLiteralDfa1_0(0x4003000000L);
      case 108:
         return jjMoveStringLiteralDfa1_0(0x1000000000000L);
      case 109:
         return jjMoveStringLiteralDfa1_0(0x4000L);
      case 114:
         return jjMoveStringLiteralDfa1_0(0x108000000000L);
      case 116:
         return jjMoveStringLiteralDfa1_0(0x80004000000L);
      case 119:
         return jjMoveStringLiteralDfa1_0(0x200000L);
      case 123:
         return jjStopAtPos(0, 28);
      case 124:
         return jjStopAtPos(0, 18);
      case 125:
         return jjStopAtPos(0, 29);
      default :
         return jjMoveNfa_0(2, 0);
   }
}
private int jjMoveStringLiteralDfa1_0(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(0, active0);
      return 1;
   }
   switch(curChar)
   {
      case 42:
         if ((active0 & 0x20L) != 0L)
            return jjStopAtPos(1, 5);
         break;
      case 45:
         if ((active0 & 0x400000000L) != 0L)
            return jjStopAtPos(1, 34);
         break;
      case 69:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa2_0(active0, 0x1400000004000L);
      case 99:
         return jjMoveStringLiteralDfa2_0(active0, 0x200000000000L);
      case 100:
         return jjMoveStringLiteralDfa2_0(active0, 0x1000000000L);
      case 101:
         return jjMoveStringLiteralDfa2_0(active0, 0x108800000000L);
      case 102:
         if ((active0 & 0x2000000L) != 0L)
            return jjStartNfaWithStates_0(1, 25, 58);
         break;
      case 104:
         return jjMoveStringLiteralDfa2_0(active0, 0x4200000L);
      case 105:
         return jjMoveStringLiteralDfa2_0(active0, 0x2000000000L);
      case 108:
         return jjMoveStringLiteralDfa2_0(active0, 0x8000000L);
      case 110:
         if ((active0 & 0x1000000L) != 0L)
         {
            jjmatchedKind = 24;
            jjmatchedPos = 1;
         }
         return jjMoveStringLiteralDfa2_0(active0, 0x4000000200L);
      case 111:
         if ((active0 & 0x40000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 42, 58);
         else if ((active0 & 0x80000000000L) != 0L)
            return jjStartNfaWithStates_0(1, 43, 58);
         return jjMoveStringLiteralDfa2_0(active0, 0x810000c00000L);
      case 114:
         return jjMoveStringLiteralDfa2_0(active0, 0x100L);
      case 117:
         return jjMoveStringLiteralDfa2_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(0, active0);
}
private int jjMoveStringLiteralDfa2_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(0, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(1, active0);
      return 2;
   }
   switch(curChar)
   {
      case 69:
         return jjMoveStringLiteralDfa3_0(active0, 0x2000000000L);
      case 79:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000000L);
      case 98:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000000L);
      case 100:
         if ((active0 & 0x200L) != 0L)
            return jjStartNfaWithStates_0(2, 9, 58);
         break;
      case 101:
         return jjMoveStringLiteralDfa3_0(active0, 0x4000100L);
      case 103:
         return jjMoveStringLiteralDfa3_0(active0, 0x1000000000L);
      case 105:
         return jjMoveStringLiteralDfa3_0(active0, 0x204000L);
      case 108:
         if ((active0 & 0x200000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 45, 58);
         return jjMoveStringLiteralDfa3_0(active0, 0x800000000000L);
      case 110:
         return jjMoveStringLiteralDfa3_0(active0, 0x100000L);
      case 111:
         return jjMoveStringLiteralDfa3_0(active0, 0x10000000000L);
      case 112:
         if ((active0 & 0x400000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 46, 58);
         break;
      case 114:
         if ((active0 & 0x400000L) != 0L)
         {
            jjmatchedKind = 22;
            jjmatchedPos = 2;
         }
         return jjMoveStringLiteralDfa3_0(active0, 0x800800000L);
      case 115:
         return jjMoveStringLiteralDfa3_0(active0, 0x8000000L);
      case 116:
         if ((active0 & 0x4000000000L) != 0L)
            return jjStartNfaWithStates_0(2, 38, 58);
         return jjMoveStringLiteralDfa3_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(1, active0);
}
private int jjMoveStringLiteralDfa3_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(1, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(2, active0);
      return 3;
   }
   switch(curChar)
   {
      case 70:
         return jjMoveStringLiteralDfa4_0(active0, 0x8000L);
      case 97:
         return jjMoveStringLiteralDfa4_0(active0, 0x100L);
      case 99:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000L);
      case 100:
         return jjMoveStringLiteralDfa4_0(active0, 0x2000000000L);
      case 101:
         if ((active0 & 0x8000000L) != 0L)
            return jjStartNfaWithStates_0(3, 27, 58);
         else if ((active0 & 0x1000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 36, 58);
         return jjMoveStringLiteralDfa4_0(active0, 0x1000000800000L);
      case 108:
         if ((active0 & 0x8000000000L) != 0L)
            return jjStartNfaWithStates_0(3, 39, 58);
         return jjMoveStringLiteralDfa4_0(active0, 0x10000200000L);
      case 110:
         if ((active0 & 0x4000L) != 0L)
            return jjStartNfaWithStates_0(3, 14, 58);
         else if ((active0 & 0x4000000L) != 0L)
            return jjStartNfaWithStates_0(3, 26, 58);
         break;
      case 111:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000000L);
      case 116:
         return jjMoveStringLiteralDfa4_0(active0, 0x800000000L);
      case 117:
         return jjMoveStringLiteralDfa4_0(active0, 0x100000000000L);
      default :
         break;
   }
   return jjStartNfa_0(2, active0);
}
private int jjMoveStringLiteralDfa4_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(2, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(3, active0);
      return 4;
   }
   switch(curChar)
   {
      case 62:
         if ((active0 & 0x8000L) != 0L)
            return jjStopAtPos(4, 15);
         break;
      case 97:
         return jjMoveStringLiteralDfa5_0(active0, 0x800000L);
      case 101:
         if ((active0 & 0x200000L) != 0L)
            return jjStartNfaWithStates_0(4, 21, 58);
         return jjMoveStringLiteralDfa5_0(active0, 0x10800000000L);
      case 103:
         return jjMoveStringLiteralDfa5_0(active0, 0x2000000000L);
      case 108:
         if ((active0 & 0x1000000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 48, 58);
         break;
      case 114:
         if ((active0 & 0x800000000000L) != 0L)
            return jjStartNfaWithStates_0(4, 47, 58);
         return jjMoveStringLiteralDfa5_0(active0, 0x100000000000L);
      case 116:
         return jjMoveStringLiteralDfa5_0(active0, 0x100100L);
      default :
         break;
   }
   return jjStartNfa_0(3, active0);
}
private int jjMoveStringLiteralDfa5_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(3, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(4, active0);
      return 5;
   }
   switch(curChar)
   {
      case 97:
         return jjMoveStringLiteralDfa6_0(active0, 0x10000000000L);
      case 99:
         return jjMoveStringLiteralDfa6_0(active0, 0x800000L);
      case 101:
         if ((active0 & 0x100L) != 0L)
            return jjStartNfaWithStates_0(5, 8, 58);
         else if ((active0 & 0x2000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 37, 58);
         break;
      case 105:
         return jjMoveStringLiteralDfa6_0(active0, 0x100000L);
      case 110:
         if ((active0 & 0x100000000000L) != 0L)
            return jjStartNfaWithStates_0(5, 44, 58);
         break;
      case 120:
         if ((active0 & 0x800000000L) != 0L)
            return jjStartNfaWithStates_0(5, 35, 58);
         break;
      default :
         break;
   }
   return jjStartNfa_0(4, active0);
}
private int jjMoveStringLiteralDfa6_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(4, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(5, active0);
      return 6;
   }
   switch(curChar)
   {
      case 104:
         if ((active0 & 0x800000L) != 0L)
            return jjStartNfaWithStates_0(6, 23, 58);
         break;
      case 110:
         if ((active0 & 0x10000000000L) != 0L)
            return jjStartNfaWithStates_0(6, 40, 58);
         break;
      case 111:
         return jjMoveStringLiteralDfa7_0(active0, 0x100000L);
      default :
         break;
   }
   return jjStartNfa_0(5, active0);
}
private int jjMoveStringLiteralDfa7_0(long old0, long active0){
   if (((active0 &= old0)) == 0L)
      return jjStartNfa_0(5, old0);
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      jjStopStringLiteralDfa_0(6, active0);
      return 7;
   }
   switch(curChar)
   {
      case 110:
         if ((active0 & 0x100000L) != 0L)
            return jjStartNfaWithStates_0(7, 20, 58);
         break;
      default :
         break;
   }
   return jjStartNfa_0(6, active0);
}
private int jjStartNfaWithStates_0(int pos, int kind, int state)
{
   jjmatchedKind = kind;
   jjmatchedPos = pos;
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) { return pos + 1; }
   return jjMoveNfa_0(state, pos + 1);
}
static final long[] jjbitVec0 = {
   0x0L, 0x0L, 0xffffffffffffffffL, 0xffffffffffffffffL
};
static final long[] jjbitVec1 = {
   0x0L, 0x0L, 0x0L, 0x10000000L
};
static final long[] jjbitVec2 = {
   0x0L, 0x0L, 0x0L, 0x8L
};
private int jjMoveNfa_0(int startState, int curPos)
{
   int startsAt = 0;
   jjnewStateCnt = 106;
   int i = 1;
   jjstateSet[0] = startState;
   int kind = 0x7fffffff;
   for (;;)
   {
      if (++jjround == 0x7fffffff)
         ReInitRounds();
      if (curChar < 64)
      {
         long l = 1L << curChar;
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
               case 58:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(58); }
                  break;
               case 16:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(58); }
                  break;
               case 82:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(58); }
                  break;
               case 2:
                  if ((0x3fe000000000000L & l) != 0L)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAddStates(0, 2); }
                  }
                  else if ((0x842000000000L & l) != 0L)
                  {
                     if (kind > 55)
                        kind = 55;
                  }
                  else if ((0x280000000000L & l) != 0L)
                  {
                     if (kind > 53)
                        kind = 53;
                  }
                  else if ((0x100000200L & l) != 0L)
                  {
                     if (kind > 10)
                        kind = 10;
                  }
                  else if (curChar == 48)
                  {
                     if (kind > 66)
                        kind = 66;
                     { jjCheckNAdd(101); }
                  }
                  else if (curChar == 34)
                     { jjCheckNAdd(60); }
                  else if (curChar == 62)
                     { jjCheckNAdd(35); }
                  else if (curChar == 60)
                     { jjCheckNAdd(35); }
                  else if (curChar == 33)
                     { jjCheckNAdd(32); }
                  else if (curChar == 61)
                     { jjCheckNAdd(32); }
                  if (curChar == 47)
                     jjstateSet[jjnewStateCnt++] = 0;
                  break;
               case 6:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(58); }
                  break;
               case 87:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(58); }
                  break;
               case 10:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(58); }
                  break;
               case 0:
                  if (curChar != 47)
                     break;
                  if (kind > 4)
                     kind = 4;
                  { jjCheckNAdd(1); }
                  break;
               case 1:
                  if ((0xfffffffffffffbffL & l) == 0L)
                     break;
                  if (kind > 4)
                     kind = 4;
                  { jjCheckNAdd(1); }
                  break;
               case 3:
                  if ((0x100000200L & l) != 0L && kind > 10)
                     kind = 10;
                  break;
               case 30:
                  if ((0x280000000000L & l) != 0L && kind > 53)
                     kind = 53;
                  break;
               case 31:
                  if ((0x842000000000L & l) != 0L && kind > 55)
                     kind = 55;
                  break;
               case 32:
                  if (curChar == 61 && kind > 57)
                     kind = 57;
                  break;
               case 33:
                  if (curChar == 61)
                     { jjCheckNAdd(32); }
                  break;
               case 34:
                  if (curChar == 33)
                     { jjCheckNAdd(32); }
                  break;
               case 35:
                  if (curChar == 61 && kind > 59)
                     kind = 59;
                  break;
               case 36:
                  if (curChar == 60)
                     { jjCheckNAdd(35); }
                  break;
               case 37:
                  if (curChar == 62)
                     { jjCheckNAdd(35); }
                  break;
               case 59:
                  if (curChar == 34)
                     { jjCheckNAdd(60); }
                  break;
               case 60:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(60, 61); }
                  break;
               case 61:
                  if (curChar == 34 && kind > 72)
                     kind = 72;
                  break;
               case 100:
                  if (curChar != 48)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAdd(101); }
                  break;
               case 101:
                  if (curChar == 46)
                     { jjCheckNAdd(102); }
                  break;
               case 102:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 68)
                     kind = 68;
                  { jjCheckNAdd(102); }
                  break;
               case 103:
                  if ((0x3fe000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAddStates(0, 2); }
                  break;
               case 104:
                  if ((0x3ff000000000000L & l) == 0L)
                     break;
                  if (kind > 66)
                     kind = 66;
                  { jjCheckNAdd(104); }
                  break;
               case 105:
                  if ((0x3ff000000000000L & l) != 0L)
                     { jjCheckNAddTwoStates(105, 101); }
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else if (curChar < 128)
      {
         long l = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 17:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     { jjCheckNAdd(58); }
                  }
                  if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 16;
                  break;
               case 16:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     { jjCheckNAdd(58); }
                  }
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 15;
                  break;
               case 82:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     { jjCheckNAdd(58); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 87;
                  else if (curChar == 105)
                     jjstateSet[jjnewStateCnt++] = 81;
                  break;
               case 2:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     { jjCheckNAdd(58); }
                  }
                  if (curChar == 71)
                     { jjAddStates(3, 5); }
                  else if (curChar == 77)
                     { jjAddStates(6, 7); }
                  else if (curChar == 83)
                     { jjAddStates(8, 9); }
                  else if (curChar == 66)
                     { jjAddStates(10, 11); }
                  else if (curChar == 89)
                     jjstateSet[jjnewStateCnt++] = 55;
                  else if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 49;
                  else if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 46;
                  else if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 41;
                  else if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 26;
                  else if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 20;
                  else if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 17;
                  else if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 10;
                  else if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 6:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     { jjCheckNAdd(58); }
                  }
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 5;
                  break;
               case 87:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     { jjCheckNAdd(58); }
                  }
                  if (curChar == 120)
                     jjstateSet[jjnewStateCnt++] = 86;
                  break;
               case 10:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                  {
                     if (kind > 70)
                        kind = 70;
                     { jjCheckNAdd(58); }
                  }
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 9;
                  break;
               case 1:
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 4:
                  if (curChar == 101 && kind > 41)
                     kind = 41;
                  break;
               case 5:
                  if (curChar == 117)
                     { jjCheckNAdd(4); }
                  break;
               case 7:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 6;
                  break;
               case 8:
                  if (curChar == 115)
                     { jjCheckNAdd(4); }
                  break;
               case 9:
                  if (curChar == 108)
                     jjstateSet[jjnewStateCnt++] = 8;
                  break;
               case 11:
                  if (curChar == 102)
                     jjstateSet[jjnewStateCnt++] = 10;
                  break;
               case 12:
                  if (curChar == 104 && kind > 49)
                     kind = 49;
                  break;
               case 13:
               case 90:
                  if (curChar == 112)
                     { jjCheckNAdd(12); }
                  break;
               case 14:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 13;
                  break;
               case 15:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 14;
                  break;
               case 18:
                  if (curChar == 68)
                     jjstateSet[jjnewStateCnt++] = 17;
                  break;
               case 19:
                  if (curChar == 70 && kind > 51)
                     kind = 51;
                  break;
               case 20:
               case 22:
                  if (curChar == 78)
                     { jjCheckNAdd(19); }
                  break;
               case 21:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 20;
                  break;
               case 23:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 22;
                  break;
               case 24:
                  if (curChar == 95)
                     jjstateSet[jjnewStateCnt++] = 23;
                  break;
               case 25:
                  if (curChar == 71)
                     jjstateSet[jjnewStateCnt++] = 24;
                  break;
               case 26:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 25;
                  break;
               case 27:
                  if (curChar == 78)
                     jjstateSet[jjnewStateCnt++] = 26;
                  break;
               case 38:
                  if (curChar == 101 && kind > 63)
                     kind = 63;
                  break;
               case 39:
               case 77:
               case 83:
                  if (curChar == 117)
                     { jjCheckNAdd(38); }
                  break;
               case 40:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 39;
                  break;
               case 41:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 40;
                  break;
               case 42:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 41;
                  break;
               case 43:
                  if (curChar == 69 && kind > 65)
                     kind = 65;
                  break;
               case 44:
                  if (curChar == 84)
                     { jjCheckNAdd(43); }
                  break;
               case 45:
                  if (curChar == 73)
                     jjstateSet[jjnewStateCnt++] = 44;
                  break;
               case 46:
                  if (curChar == 72)
                     jjstateSet[jjnewStateCnt++] = 45;
                  break;
               case 47:
                  if (curChar == 87)
                     jjstateSet[jjnewStateCnt++] = 46;
                  break;
               case 48:
                  if (curChar == 68 && kind > 65)
                     kind = 65;
                  break;
               case 49:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 48;
                  break;
               case 50:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 49;
                  break;
               case 51:
                  if (curChar == 87 && kind > 65)
                     kind = 65;
                  break;
               case 52:
                  if (curChar == 79)
                     jjstateSet[jjnewStateCnt++] = 51;
                  break;
               case 53:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 52;
                  break;
               case 54:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 53;
                  break;
               case 55:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 54;
                  break;
               case 56:
                  if (curChar == 89)
                     jjstateSet[jjnewStateCnt++] = 55;
                  break;
               case 57:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(58); }
                  break;
               case 58:
                  if ((0x7fffffe07fffffeL & l) == 0L)
                     break;
                  if (kind > 70)
                     kind = 70;
                  { jjCheckNAdd(58); }
                  break;
               case 60:
                  if ((0x7fffffe07fffffeL & l) != 0L)
                     { jjAddStates(12, 13); }
                  break;
               case 62:
                  if (curChar == 66)
                     { jjAddStates(10, 11); }
                  break;
               case 63:
                  if (curChar == 75 && kind > 65)
                     kind = 65;
                  break;
               case 64:
                  if (curChar == 67)
                     jjstateSet[jjnewStateCnt++] = 63;
                  break;
               case 65:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 64;
                  break;
               case 66:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 65;
                  break;
               case 67:
                  if (curChar == 85)
                     { jjCheckNAdd(43); }
                  break;
               case 68:
                  if (curChar == 76)
                     jjstateSet[jjnewStateCnt++] = 67;
                  break;
               case 69:
                  if (curChar == 83)
                     { jjAddStates(8, 9); }
                  break;
               case 70:
                  if (curChar == 116 && kind > 63)
                     kind = 63;
                  break;
               case 71:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 70;
                  break;
               case 72:
                  if (curChar == 107 && kind > 63)
                     kind = 63;
                  break;
               case 73:
                  if (curChar == 99)
                     jjstateSet[jjnewStateCnt++] = 72;
                  break;
               case 74:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 73;
                  break;
               case 75:
                  if (curChar == 116)
                     jjstateSet[jjnewStateCnt++] = 74;
                  break;
               case 76:
                  if (curChar == 77)
                     { jjAddStates(6, 7); }
                  break;
               case 78:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 77;
                  break;
               case 79:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 78;
                  break;
               case 80:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 79;
                  break;
               case 81:
                  if (curChar == 110)
                     jjstateSet[jjnewStateCnt++] = 80;
                  break;
               case 84:
                  if (curChar == 101)
                     jjstateSet[jjnewStateCnt++] = 83;
                  break;
               case 85:
                  if (curChar == 117)
                     jjstateSet[jjnewStateCnt++] = 84;
                  break;
               case 86:
                  if (curChar == 81)
                     jjstateSet[jjnewStateCnt++] = 85;
                  break;
               case 88:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 87;
                  break;
               case 89:
                  if (curChar == 71)
                     { jjAddStates(3, 5); }
                  break;
               case 91:
                  if (curChar == 97)
                     jjstateSet[jjnewStateCnt++] = 90;
                  break;
               case 92:
                  if (curChar == 114)
                     jjstateSet[jjnewStateCnt++] = 91;
                  break;
               case 93:
                  if (curChar == 89 && kind > 65)
                     kind = 65;
                  break;
               case 94:
                  if (curChar == 65)
                     jjstateSet[jjnewStateCnt++] = 93;
                  break;
               case 95:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 94;
                  break;
               case 96:
                  if (curChar == 78 && kind > 65)
                     kind = 65;
                  break;
               case 97:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 96;
                  break;
               case 98:
                  if (curChar == 69)
                     jjstateSet[jjnewStateCnt++] = 97;
                  break;
               case 99:
                  if (curChar == 82)
                     jjstateSet[jjnewStateCnt++] = 98;
                  break;
               default : break;
            }
         } while(i != startsAt);
      }
      else
      {
         int hiByte = (curChar >> 8);
         int i1 = hiByte >> 6;
         long l1 = 1L << (hiByte & 077);
         int i2 = (curChar & 0xff) >> 6;
         long l2 = 1L << (curChar & 077);
         do
         {
            switch(jjstateSet[--i])
            {
               case 2:
                  if (jjCanMove_2(hiByte, i1, i2, l1, l2))
                     jjstateSet[jjnewStateCnt++] = 28;
                  break;
               case 1:
                  if (!jjCanMove_0(hiByte, i1, i2, l1, l2))
                     break;
                  if (kind > 4)
                     kind = 4;
                  jjstateSet[jjnewStateCnt++] = 1;
                  break;
               case 28:
                  if (jjCanMove_1(hiByte, i1, i2, l1, l2) && kind > 51)
                     kind = 51;
                  break;
               default : if (i1 == 0 || l1 == 0 || i2 == 0 ||  l2 == 0) break; else break;
            }
         } while(i != startsAt);
      }
      if (kind != 0x7fffffff)
      {
         jjmatchedKind = kind;
         jjmatchedPos = curPos;
         kind = 0x7fffffff;
      }
      ++curPos;
      if ((i = jjnewStateCnt) == (startsAt = 106 - (jjnewStateCnt = startsAt)))
         return curPos;
      try { curChar = input_stream.readChar(); }
      catch(java.io.IOException e) { return curPos; }
   }
}
private int jjMoveStringLiteralDfa0_1(){
   switch(curChar)
   {
      case 42:
         return jjMoveStringLiteralDfa1_1(0x40L);
      default :
         return 1;
   }
}
private int jjMoveStringLiteralDfa1_1(long active0){
   try { curChar = input_stream.readChar(); }
   catch(java.io.IOException e) {
      return 1;
   }
   switch(curChar)
   {
      case 47:
         if ((active0 & 0x40L) != 0L)
            return jjStopAtPos(1, 6);
         break;
      default :
         return 2;
   }
   return 2;
}
static final int[] jjnextStates = {
   104, 105, 101, 92, 95, 99, 82, 88, 71, 75, 66, 68, 60, 61, 
};
private static final boolean jjCanMove_0(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec0[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_1(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 2:
         return ((jjbitVec1[i2] & l2) != 0L);
      default :
         return false;
   }
}
private static final boolean jjCanMove_2(int hiByte, int i1, int i2, long l1, long l2)
{
   switch(hiByte)
   {
      case 0:
         return ((jjbitVec2[i2] & l2) != 0L);
      default :
         return false;
   }
}

/** Token literal values. */
public static final String[] jjstrLiteralImages = {
"", null, null, null, null, null, null, null, "\143\162\145\141\164\145", 
"\145\156\144", null, "\12", "\54", "\56", "\155\141\151\156", "\74\105\117\106\76", "\75", 
"\46", "\174", "\41", "\146\165\156\143\164\151\157\156", "\167\150\151\154\145", 
"\146\157\162", "\146\157\162\145\141\143\150", "\151\156", "\151\146", "\164\150\145\156", 
"\145\154\163\145", "\173", "\175", "\133", "\135", "\50", "\51", "\55\55", 
"\126\145\162\164\145\170", "\105\144\147\145", "\104\151\105\144\147\145", "\151\156\164", 
"\162\145\141\154", "\142\157\157\154\145\141\156", null, "\144\157", "\164\157", 
"\162\145\164\165\162\156", "\144\143\154", "\115\141\160", "\103\157\154\157\162", 
"\154\141\142\145\154", null, null, null, null, null, null, null, null, null, null, null, null, "\74", 
"\76", null, null, null, null, null, null, null, null, null, null, };
protected Token jjFillToken()
{
   final Token t;
   final String curTokenImage;
   final int beginLine;
   final int endLine;
   final int beginColumn;
   final int endColumn;
   String im = jjstrLiteralImages[jjmatchedKind];
   curTokenImage = (im == null) ? input_stream.GetImage() : im;
   beginLine = input_stream.getBeginLine();
   beginColumn = input_stream.getBeginColumn();
   endLine = input_stream.getEndLine();
   endColumn = input_stream.getEndColumn();
   t = Token.newToken(jjmatchedKind, curTokenImage);

   t.beginLine = beginLine;
   t.endLine = endLine;
   t.beginColumn = beginColumn;
   t.endColumn = endColumn;

   return t;
}

int curLexState = 0;
int defaultLexState = 0;
int jjnewStateCnt;
int jjround;
int jjmatchedPos;
int jjmatchedKind;

/** Get the next Token. */
public Token getNextToken() 
{
  Token matchedToken;
  int curPos = 0;

  EOFLoop :
  for (;;)
  {
   try
   {
      curChar = input_stream.BeginToken();
   }
   catch(java.io.IOException e)
   {
      jjmatchedKind = 0;
      jjmatchedPos = -1;
      matchedToken = jjFillToken();
      return matchedToken;
   }

   switch(curLexState)
   {
     case 0:
       try { input_stream.backup(0);
          while (curChar <= 13 && (0x2000L & (1L << curChar)) != 0L)
             curChar = input_stream.BeginToken();
       }
       catch (java.io.IOException e1) { continue EOFLoop; }
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_0();
       break;
     case 1:
       jjmatchedKind = 0x7fffffff;
       jjmatchedPos = 0;
       curPos = jjMoveStringLiteralDfa0_1();
       if (jjmatchedPos == 0 && jjmatchedKind > 7)
       {
          jjmatchedKind = 7;
       }
       break;
   }
     if (jjmatchedKind != 0x7fffffff)
     {
        if (jjmatchedPos + 1 < curPos)
           input_stream.backup(curPos - jjmatchedPos - 1);
        if ((jjtoToken[jjmatchedKind >> 6] & (1L << (jjmatchedKind & 077))) != 0L)
        {
           matchedToken = jjFillToken();
       if (jjnewLexState[jjmatchedKind] != -1)
         curLexState = jjnewLexState[jjmatchedKind];
           return matchedToken;
        }
        else
        {
         if (jjnewLexState[jjmatchedKind] != -1)
           curLexState = jjnewLexState[jjmatchedKind];
           continue EOFLoop;
        }
     }
     int error_line = input_stream.getEndLine();
     int error_column = input_stream.getEndColumn();
     String error_after = null;
     boolean EOFSeen = false;
     try { input_stream.readChar(); input_stream.backup(1); }
     catch (java.io.IOException e1) {
        EOFSeen = true;
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
        if (curChar == '\n' || curChar == '\r') {
           error_line++;
           error_column = 0;
        }
        else
           error_column++;
     }
     if (!EOFSeen) {
        input_stream.backup(1);
        error_after = curPos <= 1 ? "" : input_stream.GetImage();
     }
     throw new TokenMgrError(EOFSeen, curLexState, error_line, error_column, error_after, curChar, TokenMgrError.LEXICAL_ERROR);
  }
}

private void jjCheckNAdd(int state)
{
   if (jjrounds[state] != jjround)
   {
      jjstateSet[jjnewStateCnt++] = state;
      jjrounds[state] = jjround;
   }
}
private void jjAddStates(int start, int end)
{
   do {
      jjstateSet[jjnewStateCnt++] = jjnextStates[start];
   } while (start++ != end);
}
private void jjCheckNAddTwoStates(int state1, int state2)
{
   jjCheckNAdd(state1);
   jjCheckNAdd(state2);
}

private void jjCheckNAddStates(int start, int end)
{
   do {
      jjCheckNAdd(jjnextStates[start]);
   } while (start++ != end);
}

    /** Constructor. */
    public TestParserTokenManager(SimpleCharStream stream){

      if (SimpleCharStream.staticFlag)
            throw new Error("ERROR: Cannot use a static CharStream class with a non-static lexical analyzer.");

    input_stream = stream;
  }

  /** Constructor. */
  public TestParserTokenManager (SimpleCharStream stream, int lexState){
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream)
  {
    jjmatchedPos = jjnewStateCnt = 0;
    curLexState = defaultLexState;
    input_stream = stream;
    ReInitRounds();
  }

  private void ReInitRounds()
  {
    int i;
    jjround = 0x80000001;
    for (i = 106; i-- > 0;)
      jjrounds[i] = 0x80000000;
  }

  /** Reinitialise parser. */
  public void ReInit(SimpleCharStream stream, int lexState)
  {
    ReInit(stream);
    SwitchTo(lexState);
  }

  /** Switch to specified lex state. */
  public void SwitchTo(int lexState)
  {
    if (lexState >= 2 || lexState < 0)
      throw new TokenMgrError("Error: Ignoring invalid lexical state : " + lexState + ". State unchanged.", TokenMgrError.INVALID_LEXICAL_STATE);
    else
      curLexState = lexState;
  }

/** Lexer state names. */
public static final String[] lexStateNames = {
   "DEFAULT",
   "ML_COMMENT_STATE",
};

/** Lex State array. */
public static final int[] jjnewLexState = {
   -1, -1, -1, -1, -1, 1, 0, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
   -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, -1, 
};
static final long[] jjtoToken = {
   0xeaabffffffffff01L, 0x156L, 
};
static final long[] jjtoSkip = {
   0xfeL, 0x0L, 
};
    protected SimpleCharStream  input_stream;

    private final int[] jjrounds = new int[106];
    private final int[] jjstateSet = new int[2 * 106];

    
    protected char curChar;
}
