/* Generated By:JJTree&JavaCC: Do not edit this line. TestParserConstants.java */
package Compiler.Parser.GeneratedFiles;


/**
 * Token literal values and constants.
 * Generated by org.javacc.parser.OtherFilesGen#start()
 */
public interface TestParserConstants {

  /** End of File. */
  int EOF = 0;
  /** RegularExpression Id. */
  int CREATE = 5;
  /** RegularExpression Id. */
  int END = 6;
  /** RegularExpression Id. */
  int BLANK = 7;
  /** RegularExpression Id. */
  int NEWLINE = 8;
  /** RegularExpression Id. */
  int COMMA = 9;
  /** RegularExpression Id. */
  int DOT = 10;
  /** RegularExpression Id. */
  int MAIN = 11;
  /** RegularExpression Id. */
  int ENDOFFILE = 12;
  /** RegularExpression Id. */
  int ASSIGN = 13;
  /** RegularExpression Id. */
  int AND = 14;
  /** RegularExpression Id. */
  int OR = 15;
  /** RegularExpression Id. */
  int NEG = 16;
  /** RegularExpression Id. */
  int FUNCTION = 17;
  /** RegularExpression Id. */
  int WHILE = 18;
  /** RegularExpression Id. */
  int FOR = 19;
  /** RegularExpression Id. */
  int FOREACH = 20;
  /** RegularExpression Id. */
  int IN = 21;
  /** RegularExpression Id. */
  int IF = 22;
  /** RegularExpression Id. */
  int THEN = 23;
  /** RegularExpression Id. */
  int ELSE = 24;
  /** RegularExpression Id. */
  int LCURLY = 25;
  /** RegularExpression Id. */
  int RCURLY = 26;
  /** RegularExpression Id. */
  int LHARD = 27;
  /** RegularExpression Id. */
  int RHARD = 28;
  /** RegularExpression Id. */
  int LPAREN = 29;
  /** RegularExpression Id. */
  int RPAREN = 30;
  /** RegularExpression Id. */
  int CONNECTION = 31;
  /** RegularExpression Id. */
  int VERTEX = 32;
  /** RegularExpression Id. */
  int EDGE = 33;
  /** RegularExpression Id. */
  int INT = 34;
  /** RegularExpression Id. */
  int REAL = 35;
  /** RegularExpression Id. */
  int BOOLEAN = 36;
  /** RegularExpression Id. */
  int BOOL_VAL = 37;
  /** RegularExpression Id. */
  int DO = 38;
  /** RegularExpression Id. */
  int TO = 39;
  /** RegularExpression Id. */
  int RETURN = 40;
  /** RegularExpression Id. */
  int DCL = 41;
  /** RegularExpression Id. */
  int GRAPH_TYPE = 42;
  /** RegularExpression Id. */
  int GRAPH = 43;
  /** RegularExpression Id. */
  int CONSTANTS = 44;
  /** RegularExpression Id. */
  int CONSTANT = 45;
  /** RegularExpression Id. */
  int ADD_SUB = 46;
  /** RegularExpression Id. */
  int addsub = 47;
  /** RegularExpression Id. */
  int MUL_DIV = 48;
  /** RegularExpression Id. */
  int muldiv = 49;
  /** RegularExpression Id. */
  int EQUALITY_OP = 50;
  /** RegularExpression Id. */
  int equality_ope = 51;
  /** RegularExpression Id. */
  int RELATIONAL_OP = 52;
  /** RegularExpression Id. */
  int relational_ope = 53;
  /** RegularExpression Id. */
  int COLLECTION_TYPE = 54;
  /** RegularExpression Id. */
  int collection = 55;
  /** RegularExpression Id. */
  int INUM_VAL = 56;
  /** RegularExpression Id. */
  int DIGIT = 57;
  /** RegularExpression Id. */
  int FNUM_VAL = 58;
  /** RegularExpression Id. */
  int DIGITF = 59;
  /** RegularExpression Id. */
  int IDENTIFIER = 60;
  /** RegularExpression Id. */
  int ID = 61;

  /** Lexical state. */
  int DEFAULT = 0;

  /** Literal token values. */
  String[] tokenImage = {
    "<EOF>",
    "\" \"",
    "\"\\r\"",
    "\"\\t\"",
    "<token of kind 4>",
    "\"create\"",
    "\"end\"",
    "<BLANK>",
    "\"\\n\"",
    "\",\"",
    "\".\"",
    "\"main\"",
    "\"<EOF>\"",
    "\"=\"",
    "\"&\"",
    "\"|\"",
    "\"!\"",
    "\"function\"",
    "\"while\"",
    "\"for\"",
    "\"foreach\"",
    "\"in\"",
    "\"if\"",
    "\"then\"",
    "\"else\"",
    "\"{\"",
    "\"}\"",
    "\"[\"",
    "\"]\"",
    "\"(\"",
    "\")\"",
    "\"--\"",
    "\"Vertex\"",
    "\"Edge\"",
    "\"int\"",
    "\"real\"",
    "\"boolean\"",
    "<BOOL_VAL>",
    "\"do\"",
    "\"to\"",
    "\"return\"",
    "\"dcl\"",
    "<GRAPH_TYPE>",
    "<GRAPH>",
    "<CONSTANTS>",
    "<CONSTANT>",
    "<ADD_SUB>",
    "<addsub>",
    "<MUL_DIV>",
    "<muldiv>",
    "<EQUALITY_OP>",
    "<equality_ope>",
    "<RELATIONAL_OP>",
    "<relational_ope>",
    "<COLLECTION_TYPE>",
    "<collection>",
    "<INUM_VAL>",
    "<DIGIT>",
    "<FNUM_VAL>",
    "<DIGITF>",
    "<IDENTIFIER>",
    "<ID>",
  };

}
