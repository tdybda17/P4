/* Generated By:JavaCC: Do not edit this line. testParser.java */
package Compiler.Parser;

public class testParser implements testParserConstants {
  public static void main(String args []) throws ParseException
  {
    testParser parser = new testParser(System.in);

    while (true)
    {
      System.out.println("Reading from standard input...");
      System.out.print("Enter an expression :");
      try
      {
        switch (testParser.one_line())
        {
          case 0 :
          System.out.println("OK.");
          break;
          default :
          break;
        }
      }
      catch (Exception e)
      {
        System.out.println("NOK.");
        System.out.println(e.getMessage());
        testParser.ReInit(System.in);
      }
      catch (Error e)
      {
        System.out.println("Oops.");
        System.out.println(e.getMessage());
        break;
      }
    }
  }

  static final public int one_line() throws ParseException {
    prog();
    {if (true) return 0;}
    throw new Error("Missing return statement in function");
  }

  static final public void prog() throws ParseException {
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NEWLINE:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      jj_consume_token(NEWLINE);
    }
    main();
    funcs_dcl();
  }

  static final public void main() throws ParseException {
    jj_consume_token(FUNCTION);
    jj_consume_token(MAIN);
    jj_consume_token(LPAREN);
    jj_consume_token(RPAREN);
    jj_consume_token(NEWLINE);
    block();
    jj_consume_token(END);
  }

  static final public void block() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
    case NEWLINE:
    case WHILE:
    case FOR:
    case FOREACH:
    case IF:
    case INT:
    case REAL:
    case BOOLEAN:
    case IDENTIFIER:
      block_content();
      jj_consume_token(NEWLINE);
      block();
      break;
    default:
      jj_la1[1] = jj_gen;
      empty();
    }
  }

  static final public void block_content() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
    case INT:
    case REAL:
    case BOOLEAN:
      dcl();
      break;
    case WHILE:
    case FOR:
    case FOREACH:
    case IF:
    case IDENTIFIER:
      stmt();
      break;
    default:
      jj_la1[2] = jj_gen;
      empty();
    }
  }

  static final public void dcl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CREATE:
      jj_consume_token(CREATE);
      adt();
      jj_consume_token(END);
      break;
    case INT:
    case REAL:
    case BOOLEAN:
      simple_types();
      jj_consume_token(IDENTIFIER);
      initialization();
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void initialization() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      expr();
      break;
    default:
      jj_la1[4] = jj_gen;
      empty();
    }
  }

  static final public void adt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH_TYPE:
      graph_type();
      break;
    case COLLECTION_TYPE:
      collection_type();
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void graph_type() throws ParseException {
    jj_consume_token(GRAPH_TYPE);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(NEWLINE);
    graph_dcl();
  }

  static final public void graph_dcl() throws ParseException {
    graph_vertex_dcl();
    jj_consume_token(NEWLINE);
    graph_dcl1();
  }

  static final public void graph_dcl1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      graph_dcl();
      break;
    default:
      jj_la1[6] = jj_gen;
      empty();
    }
  }

  static final public void graph_vertex_dcl() throws ParseException {
    jj_consume_token(IDENTIFIER);
    jj_consume_token(CONNECTION);
    graph_vertex_dcl1();
  }

  static final public void graph_vertex_dcl1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LCURLY:
      jj_consume_token(LCURLY);
      vertex_list();
      jj_consume_token(RCURLY);
      break;
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      weight();
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void vertex_list() throws ParseException {
    jj_consume_token(IDENTIFIER);
    weight();
    vertex_list1();
  }

  static final public void vertex_list1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      vertex_list();
      break;
    default:
      jj_la1[8] = jj_gen;
      empty();
    }
  }

  static final public void weight() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LHARD:
      jj_consume_token(LHARD);
      arith_expr();
      jj_consume_token(RHARD);
      break;
    default:
      jj_la1[9] = jj_gen;
      empty();
    }
  }

  static final public void expr() throws ParseException {
    and_expr();
    A();
  }

  static final public void A() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case OR:
      jj_consume_token(OR);
      and_expr();
      A();
      break;
    default:
      jj_la1[10] = jj_gen;
      empty();
    }
  }

  static final public void and_expr() throws ParseException {
    equal_expr();
    B();
  }

  static final public void B() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case AND:
      jj_consume_token(AND);
      equal_expr();
      B();
      break;
    default:
      jj_la1[11] = jj_gen;
      empty();
    }
  }

  static final public void equal_expr() throws ParseException {
    rel_expr();
    equal_expr1();
  }

  static final public void equal_expr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case EQUALITY_OP:
      jj_consume_token(EQUALITY_OP);
      rel_expr();
      break;
    default:
      jj_la1[12] = jj_gen;
      empty();
    }
  }

  static final public void rel_expr() throws ParseException {
    arith_expr();
    rel_expr1();
  }

  static final public void rel_expr1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case RELATIONAL_OP:
      jj_consume_token(RELATIONAL_OP);
      arith_expr();
      break;
    default:
      jj_la1[13] = jj_gen;
      empty();
    }
  }

  static final public void arith_expr() throws ParseException {
    term();
    C();
  }

  static final public void C() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ADD_SUB:
      jj_consume_token(ADD_SUB);
      term();
      C();
      break;
    default:
      jj_la1[14] = jj_gen;
      empty();
    }
  }

  static final public void term() throws ParseException {
    neg_expr();
    D();
  }

  static final public void D() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MUL_DIV:
      jj_consume_token(MUL_DIV);
      atomic_expr();
      D();
      break;
    default:
      jj_la1[15] = jj_gen;
      empty();
    }
  }

  static final public void neg_expr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEG:
      jj_consume_token(NEG);
      atomic_expr();
      break;
    case LPAREN:
    case BOOL_VAL:
    case INUM_VAL:
    case FNUM_VAL:
    case IDENTIFIER:
      atomic_expr();
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void atomic_expr() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LPAREN:
      jj_consume_token(LPAREN);
      expr();
      jj_consume_token(RPAREN);
      break;
    case BOOL_VAL:
    case INUM_VAL:
    case FNUM_VAL:
    case IDENTIFIER:
      value();
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void value() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      value1();
      break;
    case INUM_VAL:
      jj_consume_token(INUM_VAL);
      break;
    case FNUM_VAL:
      jj_consume_token(FNUM_VAL);
      break;
    case BOOL_VAL:
      jj_consume_token(BOOL_VAL);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void value1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case LPAREN:
      function_call1();
      break;
    default:
      jj_la1[19] = jj_gen;
      empty();
    }
  }

  static final public void function_call1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
      jj_consume_token(DOT);
      function_call();
      break;
    case LPAREN:
      jj_consume_token(LPAREN);
      actual_parameters();
      jj_consume_token(RPAREN);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void function_call() throws ParseException {
    jj_consume_token(IDENTIFIER);
    function_call1();
  }

  static final public void actual_parameters() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NEG:
    case LPAREN:
    case BOOL_VAL:
    case INUM_VAL:
    case FNUM_VAL:
    case IDENTIFIER:
      actual_parameter_list();
      break;
    default:
      jj_la1[21] = jj_gen;
      empty();
    }
  }

  static final public void actual_parameter_list() throws ParseException {
    expr();
    actual_parameter_list1();
  }

  static final public void actual_parameter_list1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      actual_parameter_list();
      break;
    default:
      jj_la1[22] = jj_gen;
      empty();
    }
  }

  static final public void simple_types() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case INT:
      jj_consume_token(INT);
      break;
    case REAL:
      jj_consume_token(REAL);
      break;
    case BOOLEAN:
      jj_consume_token(BOOLEAN);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void collection_type() throws ParseException {
    jj_consume_token(COLLECTION_TYPE);
    jj_consume_token(IDENTIFIER);
    collection_dcl();
  }

  static final public void collection_dcl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGN:
      jj_consume_token(ASSIGN);
      function_call();
      break;
    case NEWLINE:
      jj_consume_token(NEWLINE);
      element_list();
      break;
    default:
      jj_la1[24] = jj_gen;
      empty();
    }
  }

  static final public void element_list() throws ParseException {
    value();
    jj_consume_token(NEWLINE);
    element_list1();
  }

  static final public void element_list1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BOOL_VAL:
    case INUM_VAL:
    case FNUM_VAL:
    case IDENTIFIER:
      element_list();
      break;
    default:
      jj_la1[25] = jj_gen;
      empty();
    }
  }

  static final public void funcs_dcl() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FUNCTION:
    case VERTEX:
    case EDGE:
    case INT:
    case REAL:
    case BOOLEAN:
    case GRAPH_TYPE:
    case COLLECTION_TYPE:
      func_dcl();
      jj_consume_token(NEWLINE);
      funcs_dcl();
      break;
    default:
      jj_la1[26] = jj_gen;
      empty();
    }
  }

  static final public void func_dcl() throws ParseException {
    ret();
    jj_consume_token(FUNCTION);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(LPAREN);
    formal_parameters();
    jj_consume_token(RPAREN);
    block();
    jj_consume_token(END);
  }

  static final public void ret() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERTEX:
    case EDGE:
    case INT:
    case REAL:
    case BOOLEAN:
    case GRAPH_TYPE:
    case COLLECTION_TYPE:
      type();
      break;
    default:
      jj_la1[27] = jj_gen;
      empty();
    }
  }

  static final public void formal_parameters() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERTEX:
    case EDGE:
    case INT:
    case REAL:
    case BOOLEAN:
    case GRAPH_TYPE:
    case COLLECTION_TYPE:
      formal_parameter_list();
      break;
    default:
      jj_la1[28] = jj_gen;
      empty();
    }
  }

  static final public void formal_parameter_list() throws ParseException {
    formal_parameter();
    formal_parameter_list1();
  }

  static final public void formal_parameter_list1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case COMMA:
      jj_consume_token(COMMA);
      formal_parameter_list();
      break;
    default:
      jj_la1[29] = jj_gen;
      empty();
    }
  }

  static final public void formal_parameter() throws ParseException {
    type();
    jj_consume_token(IDENTIFIER);
  }

  static final public void type() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERTEX:
    case EDGE:
    case GRAPH_TYPE:
    case COLLECTION_TYPE:
      object_types();
      break;
    case INT:
    case REAL:
    case BOOLEAN:
      simple_types();
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void object_types() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case GRAPH_TYPE:
      jj_consume_token(GRAPH_TYPE);
      break;
    case COLLECTION_TYPE:
      jj_consume_token(COLLECTION_TYPE);
      break;
    case VERTEX:
    case EDGE:
      graph_element_types();
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void graph_element_types() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case VERTEX:
      jj_consume_token(VERTEX);
      break;
    case EDGE:
      jj_consume_token(EDGE);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void stmt() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case IDENTIFIER:
      jj_consume_token(IDENTIFIER);
      stmt1();
      break;
    case WHILE:
    case FOR:
    case FOREACH:
      loop();
      break;
    case IF:
      if_statement();
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void stmt1() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case DOT:
    case LPAREN:
      function_call1();
      break;
    case ASSIGN:
      assignment();
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void assignment() throws ParseException {
    jj_consume_token(ASSIGN);
    expr();
  }

  static final public void loop() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case WHILE:
      while_statement();
      break;
    case FOR:
      for_statement();
      break;
    case FOREACH:
      foreach_statement();
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  static final public void while_statement() throws ParseException {
    jj_consume_token(WHILE);
    expr();
    jj_consume_token(DO);
    jj_consume_token(NEWLINE);
    block();
    jj_consume_token(END);
  }

  static final public void for_statement() throws ParseException {
    jj_consume_token(FOR);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(ASSIGN);
    jj_consume_token(INUM_VAL);
    jj_consume_token(TO);
    jj_consume_token(INUM_VAL);
    jj_consume_token(DO);
    jj_consume_token(NEWLINE);
    block();
    jj_consume_token(END);
  }

  static final public void foreach_statement() throws ParseException {
    jj_consume_token(FOREACH);
    jj_consume_token(IDENTIFIER);
    jj_consume_token(IN);
    jj_consume_token(IDENTIFIER);
    value1();
    jj_consume_token(DO);
    jj_consume_token(NEWLINE);
    block();
    jj_consume_token(END);
  }

  static final public void if_statement() throws ParseException {
    jj_consume_token(IF);
    expr();
    jj_consume_token(THEN);
    block();
    jj_consume_token(END);
  }

  static final public void empty() throws ParseException {

  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public testParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[36];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x5c0120,0x5c0020,0x20,0x2000,0x0,0x0,0x2000000,0x200,0x8000000,0x8000,0x4000,0x0,0x0,0x0,0x0,0x20010000,0x20000000,0x0,0x20000400,0x20000400,0x20010000,0x200,0x0,0x2100,0x0,0x20000,0x0,0x0,0x200,0x0,0x0,0x0,0x5c0000,0x20002400,0x1c0000,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x100001c,0x100001c,0x1c,0x0,0x40100,0x1000000,0x1000000,0x0,0x0,0x0,0x0,0x4000,0x10000,0x400,0x1000,0x1500020,0x1500020,0x1500020,0x0,0x0,0x1500020,0x0,0x1c,0x0,0x1500020,0x4011f,0x4011f,0x4011f,0x0,0x4011f,0x40103,0x3,0x1000000,0x0,0x0,};
   }

  /** Constructor with InputStream. */
  public testParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public testParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new testParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public testParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new testParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public testParser(testParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(testParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 36; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[58];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 36; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 58; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
