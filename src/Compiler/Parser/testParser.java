package Compiler.Parser;
/* testParser.java */
/* Generated By:JJTree&JavaCC: Do not edit this line. testParser.java */
import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import Compiler.Parser.SimpleNode;

public class testParser/*@bgen(jjtree)*/implements testParserTreeConstants, testParserConstants {/*@bgen(jjtree)*/
  protected static JJTtestParserState jjtree = new JJTtestParserState();public static void main(String[] args) throws ParseException {
          try {
                      File file = new File("src/Compiler/Parser/test");

                      BufferedReader reader = new BufferedReader(new FileReader(file));
                      testParser parser = new testParser(reader);
                      SimpleNode root = one_line();
                      root.dump("");

                  } catch (Exception e) {
                      System.out.println(e.getMessage());
                  }
    }

  static void skip_to_first_dcl() throws ParseException {/*@bgen(jjtree) skip_to_first_dcl */
   SimpleNode jjtn000 = new SimpleNode(JJTSKIP_TO_FIRST_DCL);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   try {Token tok;
      while (true) {
        tok = getToken(1);
        if (tok.kind != NEWLINE ) break;
        tok = getNextToken();
      }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
  }

  static void skip_to_EOF() throws ParseException {/*@bgen(jjtree) skip_to_EOF */
   SimpleNode jjtn000 = new SimpleNode(JJTSKIP_TO_EOF);
   boolean jjtc000 = true;
   jjtree.openNodeScope(jjtn000);
   try {Token tok;
      while (true) {
        tok = getToken(1);
        if (tok.kind == EOF ) break;
        tok = getNextToken();
      }/*@bgen(jjtree)*/
   } finally {
     if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
   }
  }

  static final public SimpleNode one_line() throws ParseException {/*@bgen(jjtree) ONE_LINE */
  SimpleNode jjtn000 = new SimpleNode(JJTONE_LINE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      prog();
jjtree.closeNodeScope(jjtn000, true);
           jjtc000 = false;
{if ("" != null) return jjtn000;}
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
    throw new Error("Missing return statement in function");
  }

  static final public void prog() throws ParseException {/*@bgen(jjtree) PROG */
  SimpleNode jjtn000 = new SimpleNode(JJTPROG);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      skip_to_first_dcl();
      vertex_edge_dcl();
      label_1:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEWLINE:{
          ;
          break;
          }
        default:
          jj_la1[0] = jj_gen;
          break label_1;
        }
        jj_consume_token(NEWLINE);
      }
      main();
      label_2:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
        case NEWLINE:{
          ;
          break;
          }
        default:
          jj_la1[1] = jj_gen;
          break label_2;
        }
        jj_consume_token(NEWLINE);
      }
      funcs_dcl();
      skip_to_EOF();
      jj_consume_token(0);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void vertex_edge_dcl() throws ParseException {/*@bgen(jjtree) VERTEX_EDGE_DCL */
  SimpleNode jjtn000 = new SimpleNode(JJTVERTEX_EDGE_DCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VERTEX:
      case EDGE:{
        graph_element_types();
        jj_consume_token(DCL);
        jj_consume_token(NEWLINE);
        attribute_dcl();
        jj_consume_token(END);
        break;
        }
      default:
        jj_la1[2] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void attribute_dcl() throws ParseException {/*@bgen(jjtree) ATTRIBUTE_DCL */
  SimpleNode jjtn000 = new SimpleNode(JJTATTRIBUTE_DCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:
      case REAL:
      case BOOLEAN:{
        simple_types();
        jj_consume_token(IDENTIFIER);
        initialization();
        jj_consume_token(NEWLINE);
        attribute_dcl();
        break;
        }
      case VERTEX:
      case EDGE:
      case GRAPH_TYPE:
      case COLLECTION_TYPE:{
        object_types();
        jj_consume_token(IDENTIFIER);
        jj_consume_token(NEWLINE);
        attribute_dcl();
        break;
        }
      default:
        jj_la1[3] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void main() throws ParseException {/*@bgen(jjtree) MAIN */
  SimpleNode jjtn000 = new SimpleNode(JJTMAIN);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FUNCTION);
      jj_consume_token(MAIN);
      jj_consume_token(LPAREN);
      jj_consume_token(RPAREN);
      jj_consume_token(NEWLINE);
      block();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void block() throws ParseException {/*@bgen(jjtree) BLOCK */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CREATE:
      case NEWLINE:
      case WHILE:
      case FOR:
      case FOREACH:
      case IF:
      case INT:
      case REAL:
      case BOOLEAN:
      case RETURN:
      case IDENTIFIER:{
        block_content();
        jj_consume_token(NEWLINE);
        block();
        break;
        }
      default:
        jj_la1[4] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void block_content() throws ParseException {/*@bgen(jjtree) BLOCK_CONTENT */
  SimpleNode jjtn000 = new SimpleNode(JJTBLOCK_CONTENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CREATE:
      case INT:
      case REAL:
      case BOOLEAN:{
        dcl();
        break;
        }
      case WHILE:
      case FOR:
      case FOREACH:
      case IF:
      case RETURN:
      case IDENTIFIER:{
        stmt();
        break;
        }
      default:
        jj_la1[5] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void dcl() throws ParseException {/*@bgen(jjtree) DCL */
  SimpleNode jjtn000 = new SimpleNode(JJTDCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case CREATE:{
        jj_consume_token(CREATE);
        adt();
        jj_consume_token(END);
        break;
        }
      case INT:
      case REAL:
      case BOOLEAN:{
        simple_types();
        identifier();
        initialization();
        break;
        }
      default:
        jj_la1[6] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void identifier() throws ParseException {/*@bgen(jjtree) IDENTIFIER */
 SimpleNode jjtn000 = new SimpleNode(JJTIDENTIFIER);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(IDENTIFIER);
jjtree.closeNodeScope(jjtn000, true);
                         jjtc000 = false;
jjtn000.value = t.image;
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void initialization() throws ParseException {/*@bgen(jjtree) INITIALIZATION */
 SimpleNode jjtn000 = new SimpleNode(JJTINITIALIZATION);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        t = jj_consume_token(ASSIGN);
jjtn000.value = t.image;
        expr();
        break;
        }
      default:
        jj_la1[7] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void adt() throws ParseException {/*@bgen(jjtree) ADT */
  SimpleNode jjtn000 = new SimpleNode(JJTADT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GRAPH_TYPE:{
        graph_type();
        break;
        }
      case COLLECTION_TYPE:{
        collection_type();
        break;
        }
      default:
        jj_la1[8] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void graph_type() throws ParseException {/*@bgen(jjtree) GRAPH_TYPE */
  SimpleNode jjtn000 = new SimpleNode(JJTGRAPH_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(GRAPH_TYPE);
      jj_consume_token(IDENTIFIER);
      graph_dcl();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void graph_dcl() throws ParseException {/*@bgen(jjtree) GRAPH_DCL */
  SimpleNode jjtn000 = new SimpleNode(JJTGRAPH_DCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        member_function_call();
        break;
        }
      case NEWLINE:{
        jj_consume_token(NEWLINE);
        graph_elements();
        break;
        }
      default:
        jj_la1[9] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void graph_elements() throws ParseException {/*@bgen(jjtree) GRAPH_ELEMENTS */
  SimpleNode jjtn000 = new SimpleNode(JJTGRAPH_ELEMENTS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        graph_vertex_dcl();
        jj_consume_token(NEWLINE);
        graph_elements();
        break;
        }
      default:
        jj_la1[10] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void graph_vertex_dcl() throws ParseException {/*@bgen(jjtree) GRAPH_VERTEX_DCL */
  SimpleNode jjtn000 = new SimpleNode(JJTGRAPH_VERTEX_DCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      jj_consume_token(CONNECTION);
      graph_vertex_dcl1();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void graph_vertex_dcl1() throws ParseException {/*@bgen(jjtree) GRAPH_VERTEX_DCL1 */
  SimpleNode jjtn000 = new SimpleNode(JJTGRAPH_VERTEX_DCL1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LCURLY:{
        jj_consume_token(LCURLY);
        vertex_list();
        jj_consume_token(RCURLY);
        break;
        }
      case IDENTIFIER:{
        jj_consume_token(IDENTIFIER);
        weight();
        break;
        }
      default:
        jj_la1[11] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void vertex_list() throws ParseException {/*@bgen(jjtree) VERTEX_LIST */
  SimpleNode jjtn000 = new SimpleNode(JJTVERTEX_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      weight();
      vertex_list_continuous();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void vertex_list_continuous() throws ParseException {/*@bgen(jjtree) VERTEX_LIST_CONTINUOUS */
  SimpleNode jjtn000 = new SimpleNode(JJTVERTEX_LIST_CONTINUOUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        vertex_list();
        break;
        }
      default:
        jj_la1[12] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void weight() throws ParseException {/*@bgen(jjtree) WEIGHT */
  SimpleNode jjtn000 = new SimpleNode(JJTWEIGHT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LHARD:{
        jj_consume_token(LHARD);
        arith_expr();
        jj_consume_token(RHARD);
        break;
        }
      default:
        jj_la1[13] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void expr() throws ParseException {/*@bgen(jjtree) EXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTEXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      and_expr();
      A();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void A() throws ParseException {/*@bgen(jjtree) A */
  SimpleNode jjtn000 = new SimpleNode(JJTA);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case OR:{
        jj_consume_token(OR);
        and_expr();
        A();
        break;
        }
      default:
        jj_la1[14] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void and_expr() throws ParseException {/*@bgen(jjtree) AND_EXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTAND_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      equal_expr();
      B();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void B() throws ParseException {/*@bgen(jjtree) B */
  SimpleNode jjtn000 = new SimpleNode(JJTB);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case AND:{
        jj_consume_token(AND);
        equal_expr();
        B();
        break;
        }
      default:
        jj_la1[15] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void equal_expr() throws ParseException {/*@bgen(jjtree) EQUAL_EXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUAL_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      rel_expr();
      equal_expr1();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void equal_expr1() throws ParseException {/*@bgen(jjtree) EQUAL_EXPR1 */
  SimpleNode jjtn000 = new SimpleNode(JJTEQUAL_EXPR1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case EQUALITY_OP:{
        jj_consume_token(EQUALITY_OP);
        rel_expr();
        break;
        }
      default:
        jj_la1[16] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void rel_expr() throws ParseException {/*@bgen(jjtree) REL_EXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTREL_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      arith_expr();
      rel_expr1();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void rel_expr1() throws ParseException {/*@bgen(jjtree) REL_EXPR1 */
 SimpleNode jjtn000 = new SimpleNode(JJTREL_EXPR1);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case RELATIONAL_OP:{
        t = jj_consume_token(RELATIONAL_OP);
jjtn000.value = t.image;
        arith_expr();
        break;
        }
      default:
        jj_la1[17] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void arith_expr() throws ParseException {/*@bgen(jjtree) ARITH_EXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTARITH_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      term();
      C();
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void C() throws ParseException {/*@bgen(jjtree) C */
  SimpleNode jjtn000 = new SimpleNode(JJTC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ADD_SUB:{
        jj_consume_token(ADD_SUB);
        term();
        C();
        break;
        }
      default:
        jj_la1[18] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void term() throws ParseException {/*@bgen(jjtree) TERM */
  SimpleNode jjtn000 = new SimpleNode(JJTTERM);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      neg_expr();
      D();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void D() throws ParseException {/*@bgen(jjtree) D */
 SimpleNode jjtn000 = new SimpleNode(JJTD);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case MUL_DIV:{
        t = jj_consume_token(MUL_DIV);
jjtn000.value = t.image;
        atomic_expr();
        D();
        break;
        }
      default:
        jj_la1[19] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void neg_expr() throws ParseException {/*@bgen(jjtree) NEG_EXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTNEG_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEG:{
        jj_consume_token(NEG);
        atomic_expr();
        break;
        }
      case LPAREN:
      case BOOL_VAL:
      case CONSTANTS:
      case INUM_VAL:
      case FNUM_VAL:
      case IDENTIFIER:{
        atomic_expr();
        break;
        }
      default:
        jj_la1[20] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void atomic_expr() throws ParseException {/*@bgen(jjtree) ATOMIC_EXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTATOMIC_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case LPAREN:{
        jj_consume_token(LPAREN);
        expr();
        jj_consume_token(RPAREN);
        break;
        }
      case BOOL_VAL:
      case CONSTANTS:
      case INUM_VAL:
      case FNUM_VAL:
      case IDENTIFIER:{
        value();
        break;
        }
      default:
        jj_la1[21] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void value() throws ParseException {/*@bgen(jjtree) VALUE */
 SimpleNode jjtn000 = new SimpleNode(JJTVALUE);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        member_function_call();
        break;
        }
      case INUM_VAL:{
        t = jj_consume_token(INUM_VAL);
jjtree.closeNodeScope(jjtn000, true);
                                                jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      case FNUM_VAL:{
        t = jj_consume_token(FNUM_VAL);
jjtree.closeNodeScope(jjtn000, true);
                                                                                              jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      case BOOL_VAL:{
        t = jj_consume_token(BOOL_VAL);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                            jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      case CONSTANTS:{
        t = jj_consume_token(CONSTANTS);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                                                                                                           jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      default:
        jj_la1[22] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void member_function_call() throws ParseException {/*@bgen(jjtree) MEMBER_FUNCTION_CALL */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBER_FUNCTION_CALL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IDENTIFIER);
      member_function_call_tail();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void member_function_call_tail() throws ParseException {/*@bgen(jjtree) MEMBER_FUNCTION_CALL_TAIL */
  SimpleNode jjtn000 = new SimpleNode(JJTMEMBER_FUNCTION_CALL_TAIL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        member_function_call();
        break;
        }
      case LPAREN:{
        jj_consume_token(LPAREN);
        actual_parameters();
        jj_consume_token(RPAREN);
        continuous();
        break;
        }
      default:
        jj_la1[23] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void continuous() throws ParseException {/*@bgen(jjtree) CONTINUOUS */
  SimpleNode jjtn000 = new SimpleNode(JJTCONTINUOUS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case DOT:{
        jj_consume_token(DOT);
        member_function_call();
        break;
        }
      default:
        jj_la1[24] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void actual_parameters() throws ParseException {/*@bgen(jjtree) ACTUAL_PARAMETERS */
  SimpleNode jjtn000 = new SimpleNode(JJTACTUAL_PARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEG:
      case LPAREN:
      case BOOL_VAL:
      case CONSTANTS:
      case INUM_VAL:
      case FNUM_VAL:
      case IDENTIFIER:{
        actual_parameter_list();
        break;
        }
      default:
        jj_la1[25] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void actual_parameter_list() throws ParseException {/*@bgen(jjtree) ACTUAL_PARAMETER_LIST */
  SimpleNode jjtn000 = new SimpleNode(JJTACTUAL_PARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      expr();
      actual_parameter_list1();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void actual_parameter_list1() throws ParseException {/*@bgen(jjtree) ACTUAL_PARAMETER_LIST1 */
  SimpleNode jjtn000 = new SimpleNode(JJTACTUAL_PARAMETER_LIST1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        actual_parameter_list();
        break;
        }
      default:
        jj_la1[26] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void simple_types() throws ParseException {/*@bgen(jjtree) SIMPLE_TYPES */
 SimpleNode jjtn000 = new SimpleNode(JJTSIMPLE_TYPES);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case INT:{
        t = jj_consume_token(INT);
jjtree.closeNodeScope(jjtn000, true);
                  jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      case REAL:{
        t = jj_consume_token(REAL);
jjtree.closeNodeScope(jjtn000, true);
                                                            jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      case BOOLEAN:{
        t = jj_consume_token(BOOLEAN);
jjtree.closeNodeScope(jjtn000, true);
                                                                                                         jjtc000 = false;
jjtn000.value = t.image;
        break;
        }
      default:
        jj_la1[27] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void collection_type() throws ParseException {/*@bgen(jjtree) COLLECTION_TYPE */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLLECTION_TYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(COLLECTION_TYPE);
      jj_consume_token(IDENTIFIER);
      collection_dcl();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void collection_dcl() throws ParseException {/*@bgen(jjtree) COLLECTION_DCL */
  SimpleNode jjtn000 = new SimpleNode(JJTCOLLECTION_DCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        jj_consume_token(ASSIGN);
        member_function_call();
        break;
        }
      case NEWLINE:{
        jj_consume_token(NEWLINE);
        element_list();
        break;
        }
      default:
        jj_la1[28] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
       jjtree.clearNodeScope(jjtn000);
       jjtc000 = false;
     } else {
       jjtree.popNode();
     }
     if (jjte000 instanceof RuntimeException) {
       {if (true) throw (RuntimeException)jjte000;}
     }
     if (jjte000 instanceof ParseException) {
       {if (true) throw (ParseException)jjte000;}
     }
     {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
       jjtree.closeNodeScope(jjtn000, true);
     }
    }
  }

  static final public void element_list() throws ParseException {/*@bgen(jjtree) ELEMENT_LIST */
  SimpleNode jjtn000 = new SimpleNode(JJTELEMENT_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      value();
      jj_consume_token(NEWLINE);
      element_list_continuous();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void element_list_continuous() throws ParseException {/*@bgen(jjtree) ELEMENT_LIST1 */
  SimpleNode jjtn000 = new SimpleNode(JJTELEMENT_LIST1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case BOOL_VAL:
      case CONSTANTS:
      case INUM_VAL:
      case FNUM_VAL:
      case IDENTIFIER:{
        element_list();
        break;
        }
      default:
        jj_la1[29] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void funcs_dcl() throws ParseException {/*@bgen(jjtree) FUNCS_DCL */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNCS_DCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case FUNCTION:
      case VERTEX:
      case EDGE:
      case INT:
      case REAL:
      case BOOLEAN:
      case GRAPH_TYPE:
      case COLLECTION_TYPE:{
        func_dcl();
        jj_consume_token(NEWLINE);
        funcs_dcl();
        break;
        }
      default:
        jj_la1[30] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void func_dcl() throws ParseException {/*@bgen(jjtree) FUNC_DCL */
  SimpleNode jjtn000 = new SimpleNode(JJTFUNC_DCL);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      ret();
      jj_consume_token(FUNCTION);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(LPAREN);
      formal_parameters();
      jj_consume_token(RPAREN);
      block();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void ret() throws ParseException {/*@bgen(jjtree) RET */
  SimpleNode jjtn000 = new SimpleNode(JJTRET);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VERTEX:
      case EDGE:
      case INT:
      case REAL:
      case BOOLEAN:
      case GRAPH_TYPE:
      case COLLECTION_TYPE:{
        type();
        break;
        }
      default:
        jj_la1[31] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void formal_parameters() throws ParseException {/*@bgen(jjtree) FORMAL_PARAMETERS */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMAL_PARAMETERS);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VERTEX:
      case EDGE:
      case INT:
      case REAL:
      case BOOLEAN:
      case GRAPH_TYPE:
      case COLLECTION_TYPE:{
        formal_parameter_list();
        break;
        }
      default:
        jj_la1[32] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void formal_parameter_list() throws ParseException {/*@bgen(jjtree) FORMAL_PARAMETER_LIST */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMAL_PARAMETER_LIST);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      formal_parameter();
      formal_parameter_list1();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void formal_parameter_list1() throws ParseException {/*@bgen(jjtree) FORMAL_PARAMETER_LIST1 */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMAL_PARAMETER_LIST1);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case COMMA:{
        jj_consume_token(COMMA);
        formal_parameter_list();
        break;
        }
      default:
        jj_la1[33] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void formal_parameter() throws ParseException {/*@bgen(jjtree) FORMAL_PARAMETER */
  SimpleNode jjtn000 = new SimpleNode(JJTFORMAL_PARAMETER);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      type();
      jj_consume_token(IDENTIFIER);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void type() throws ParseException {/*@bgen(jjtree) TYPE */
  SimpleNode jjtn000 = new SimpleNode(JJTTYPE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VERTEX:
      case EDGE:
      case GRAPH_TYPE:
      case COLLECTION_TYPE:{
        object_types();
        break;
        }
      case INT:
      case REAL:
      case BOOLEAN:{
        simple_types();
        break;
        }
      default:
        jj_la1[34] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void object_types() throws ParseException {/*@bgen(jjtree) OBJECT_TYPES */
  SimpleNode jjtn000 = new SimpleNode(JJTOBJECT_TYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case GRAPH_TYPE:{
        jj_consume_token(GRAPH_TYPE);
        break;
        }
      case COLLECTION_TYPE:{
        jj_consume_token(COLLECTION_TYPE);
        break;
        }
      case VERTEX:
      case EDGE:{
        graph_element_types();
        break;
        }
      default:
        jj_la1[35] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void graph_element_types() throws ParseException {/*@bgen(jjtree) GRAPH_ELEMENT_TYPES */
  SimpleNode jjtn000 = new SimpleNode(JJTGRAPH_ELEMENT_TYPES);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case VERTEX:{
        jj_consume_token(VERTEX);
        break;
        }
      case EDGE:{
        jj_consume_token(EDGE);
        break;
        }
      default:
        jj_la1[36] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void stmt() throws ParseException {/*@bgen(jjtree) STMT */
  SimpleNode jjtn000 = new SimpleNode(JJTSTMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        member_function_call();
        assign_or_func();
        break;
        }
      case WHILE:
      case FOR:
      case FOREACH:{
        loop();
        break;
        }
      case IF:{
        if_statement();
        break;
        }
      case RETURN:{
        return_stmt();
        break;
        }
      default:
        jj_la1[37] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void assign_or_func() throws ParseException {/*@bgen(jjtree) ASSIGN_OR_FUNC */
  SimpleNode jjtn000 = new SimpleNode(JJTASSIGN_OR_FUNC);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ASSIGN:{
        assignment();
        break;
        }
      default:
        jj_la1[38] = jj_gen;
        empty();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void return_stmt() throws ParseException {/*@bgen(jjtree) RETURN_STMT */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN_STMT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(RETURN);
      return_expr();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void return_expr() throws ParseException {/*@bgen(jjtree) RETURN_EXPR */
  SimpleNode jjtn000 = new SimpleNode(JJTRETURN_EXPR);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case NEG:
      case LPAREN:
      case BOOL_VAL:
      case CONSTANTS:
      case INUM_VAL:
      case FNUM_VAL:
      case IDENTIFIER:{
        expr();
        break;
        }
      case CREATE:{
        jj_consume_token(CREATE);
        adt();
        jj_consume_token(END);
        break;
        }
      default:
        jj_la1[39] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void assignment() throws ParseException {/*@bgen(jjtree) ASSIGNMENT */
 SimpleNode jjtn000 = new SimpleNode(JJTASSIGNMENT);
 boolean jjtc000 = true;
 jjtree.openNodeScope(jjtn000);Token t;
    try {
      t = jj_consume_token(ASSIGN);
jjtn000.value = t.image;
      expr();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void loop() throws ParseException {/*@bgen(jjtree) LOOP */
  SimpleNode jjtn000 = new SimpleNode(JJTLOOP);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case WHILE:{
        while_statement();
        break;
        }
      case FOR:{
        for_statement();
        break;
        }
      case FOREACH:{
        foreach_statement();
        break;
        }
      default:
        jj_la1[40] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
      jjtree.clearNodeScope(jjtn000);
      jjtc000 = false;
    } else {
      jjtree.popNode();
    }
    if (jjte000 instanceof RuntimeException) {
      {if (true) throw (RuntimeException)jjte000;}
    }
    if (jjte000 instanceof ParseException) {
      {if (true) throw (ParseException)jjte000;}
    }
    {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
      jjtree.closeNodeScope(jjtn000, true);
    }
    }
  }

  static final public void while_statement() throws ParseException {/*@bgen(jjtree) WHILE_STATEMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTWHILE_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(WHILE);
      expr();
      jj_consume_token(DO);
      jj_consume_token(NEWLINE);
      block();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void for_statement() throws ParseException {/*@bgen(jjtree) FOR_STATEMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTFOR_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOR);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(ASSIGN);
      integer_value();
      jj_consume_token(TO);
      integer_value();
      jj_consume_token(DO);
      jj_consume_token(NEWLINE);
      block();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void integer_value() throws ParseException {/*@bgen(jjtree) INTEGER_VALUE */
  SimpleNode jjtn000 = new SimpleNode(JJTINTEGER_VALUE);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case IDENTIFIER:{
        member_function_call();
        break;
        }
      case INUM_VAL:{
        jj_consume_token(INUM_VAL);
        break;
        }
      default:
        jj_la1[41] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void foreach_statement() throws ParseException {/*@bgen(jjtree) FOREACH_STATEMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTFOREACH_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(FOREACH);
      jj_consume_token(IDENTIFIER);
      jj_consume_token(IN);
      member_function_call();
      jj_consume_token(DO);
      jj_consume_token(NEWLINE);
      block();
      jj_consume_token(END);
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void if_statement() throws ParseException {/*@bgen(jjtree) IF_STATEMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTIF_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      jj_consume_token(IF);
      expr();
      jj_consume_token(THEN);
      block();
      else_statement();
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void else_statement() throws ParseException {/*@bgen(jjtree) ELSE_STATEMENT */
  SimpleNode jjtn000 = new SimpleNode(JJTELSE_STATEMENT);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
      switch ((jj_ntk==-1)?jj_ntk_f():jj_ntk) {
      case ELSE:{
        jj_consume_token(ELSE);
        block();
        jj_consume_token(END);
        break;
        }
      case END:{
        jj_consume_token(END);
        break;
        }
      default:
        jj_la1[42] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
    } catch (Throwable jjte000) {
if (jjtc000) {
        jjtree.clearNodeScope(jjtn000);
        jjtc000 = false;
      } else {
        jjtree.popNode();
      }
      if (jjte000 instanceof RuntimeException) {
        {if (true) throw (RuntimeException)jjte000;}
      }
      if (jjte000 instanceof ParseException) {
        {if (true) throw (ParseException)jjte000;}
      }
      {if (true) throw (Error)jjte000;}
    } finally {
if (jjtc000) {
        jjtree.closeNodeScope(jjtn000, true);
      }
    }
  }

  static final public void empty() throws ParseException {/*@bgen(jjtree) EMPTY */
  SimpleNode jjtn000 = new SimpleNode(JJTEMPTY);
  boolean jjtc000 = true;
  jjtree.openNodeScope(jjtn000);
    try {
jjtree.closeNodeScope(jjtn000, true);
       jjtc000 = false;

    } finally {
if (jjtc000) {
         jjtree.closeNodeScope(jjtn000, true);
       }
    }
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public testParserTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[43];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x100,0x100,0x0,0x0,0x5c0120,0x5c0020,0x20,0x2000,0x0,0x2100,0x0,0x2000000,0x200,0x8000000,0x8000,0x4000,0x0,0x0,0x0,0x0,0x20010000,0x20000000,0x0,0x20000400,0x400,0x20010000,0x200,0x0,0x2100,0x0,0x20000,0x0,0x0,0x200,0x0,0x0,0x0,0x5c0000,0x2000,0x20010020,0x1c0000,0x0,0x1000040,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x3,0x40041f,0x1000011c,0x1000011c,0x1c,0x0,0x400400,0x0,0x10000000,0x10000000,0x0,0x0,0x0,0x0,0x40000,0x100000,0x4000,0x10000,0x15001020,0x15001020,0x15001020,0x0,0x0,0x15001020,0x0,0x1c,0x0,0x15001020,0x40041f,0x40041f,0x40041f,0x0,0x40041f,0x400403,0x3,0x10000100,0x0,0x15001020,0x0,0x11000000,0x0,};
   }

  /** Constructor with InputStream. */
  public testParser(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public testParser(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new testParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public testParser(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new testParserTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public testParser(testParserTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(testParserTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jjtree.reset();
    jj_gen = 0;
    for (int i = 0; i < 43; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk_f() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[62];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 43; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 62; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
